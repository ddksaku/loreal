#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LorealOptimiseData
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LorealOptimise")]
	public partial class DbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAnimationType(AnimationType instance);
    partial void UpdateAnimationType(AnimationType instance);
    partial void DeleteAnimationType(AnimationType instance);
    partial void InsertAuditAlert(AuditAlert instance);
    partial void UpdateAuditAlert(AuditAlert instance);
    partial void DeleteAuditAlert(AuditAlert instance);
    partial void InsertBrandAxe(BrandAxe instance);
    partial void UpdateBrandAxe(BrandAxe instance);
    partial void DeleteBrandAxe(BrandAxe instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCustomerBrandExclusion(CustomerBrandExclusion instance);
    partial void UpdateCustomerBrandExclusion(CustomerBrandExclusion instance);
    partial void DeleteCustomerBrandExclusion(CustomerBrandExclusion instance);
    partial void InsertCustomerCapacity(CustomerCapacity instance);
    partial void UpdateCustomerCapacity(CustomerCapacity instance);
    partial void DeleteCustomerCapacity(CustomerCapacity instance);
    partial void InsertCustomerCategory(CustomerCategory instance);
    partial void UpdateCustomerCategory(CustomerCategory instance);
    partial void DeleteCustomerCategory(CustomerCategory instance);
    partial void InsertCustomerGroupItemType(CustomerGroupItemType instance);
    partial void UpdateCustomerGroupItemType(CustomerGroupItemType instance);
    partial void DeleteCustomerGroupItemType(CustomerGroupItemType instance);
    partial void InsertDistributionChannel(DistributionChannel instance);
    partial void UpdateDistributionChannel(DistributionChannel instance);
    partial void DeleteDistributionChannel(DistributionChannel instance);
    partial void InsertDivision(Division instance);
    partial void UpdateDivision(Division instance);
    partial void DeleteDivision(Division instance);
    partial void InsertEventLog(EventLog instance);
    partial void UpdateEventLog(EventLog instance);
    partial void DeleteEventLog(EventLog instance);
    partial void InsertHistoryLog(HistoryLog instance);
    partial void UpdateHistoryLog(HistoryLog instance);
    partial void DeleteHistoryLog(HistoryLog instance);
    partial void InsertItemGroup(ItemGroup instance);
    partial void UpdateItemGroup(ItemGroup instance);
    partial void DeleteItemGroup(ItemGroup instance);
    partial void InsertItemType(ItemType instance);
    partial void UpdateItemType(ItemType instance);
    partial void DeleteItemType(ItemType instance);
    partial void InsertMultiple(Multiple instance);
    partial void UpdateMultiple(Multiple instance);
    partial void DeleteMultiple(Multiple instance);
    partial void InsertOrderType(OrderType instance);
    partial void UpdateOrderType(OrderType instance);
    partial void DeleteOrderType(OrderType instance);
    partial void InsertPriority(Priority instance);
    partial void UpdatePriority(Priority instance);
    partial void DeletePriority(Priority instance);
    partial void InsertProductConfirmed(ProductConfirmed instance);
    partial void UpdateProductConfirmed(ProductConfirmed instance);
    partial void DeleteProductConfirmed(ProductConfirmed instance);
    partial void InsertProductReceived(ProductReceived instance);
    partial void UpdateProductReceived(ProductReceived instance);
    partial void DeleteProductReceived(ProductReceived instance);
    partial void InsertRetailerType(RetailerType instance);
    partial void UpdateRetailerType(RetailerType instance);
    partial void DeleteRetailerType(RetailerType instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSale(Sale instance);
    partial void UpdateSale(Sale instance);
    partial void DeleteSale(Sale instance);
    partial void InsertSalesDrive(SalesDrive instance);
    partial void UpdateSalesDrive(SalesDrive instance);
    partial void DeleteSalesDrive(SalesDrive instance);
    partial void InsertSalesOrganization(SalesOrganization instance);
    partial void UpdateSalesOrganization(SalesOrganization instance);
    partial void DeleteSalesOrganization(SalesOrganization instance);
    partial void InsertSignature(Signature instance);
    partial void UpdateSignature(Signature instance);
    partial void DeleteSignature(Signature instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertSalesArea(SalesArea instance);
    partial void UpdateSalesArea(SalesArea instance);
    partial void DeleteSalesArea(SalesArea instance);
    partial void InsertCustomerGroup(CustomerGroup instance);
    partial void UpdateCustomerGroup(CustomerGroup instance);
    partial void DeleteCustomerGroup(CustomerGroup instance);
    partial void InsertAnimationProductDetail(AnimationProductDetail instance);
    partial void UpdateAnimationProductDetail(AnimationProductDetail instance);
    partial void DeleteAnimationProductDetail(AnimationProductDetail instance);
    partial void InsertCustomerGroupAllocation(CustomerGroupAllocation instance);
    partial void UpdateCustomerGroupAllocation(CustomerGroupAllocation instance);
    partial void DeleteCustomerGroupAllocation(CustomerGroupAllocation instance);
    partial void InsertVersion(Version instance);
    partial void UpdateVersion(Version instance);
    partial void DeleteVersion(Version instance);
    partial void InsertAnimationProduct(AnimationProduct instance);
    partial void UpdateAnimationProduct(AnimationProduct instance);
    partial void DeleteAnimationProduct(AnimationProduct instance);
    partial void InsertAnimation(Animation instance);
    partial void UpdateAnimation(Animation instance);
    partial void DeleteAnimation(Animation instance);
    partial void InsertSystemMessage(SystemMessage instance);
    partial void UpdateSystemMessage(SystemMessage instance);
    partial void DeleteSystemMessage(SystemMessage instance);
    partial void InsertApplicationSetting(ApplicationSetting instance);
    partial void UpdateApplicationSetting(ApplicationSetting instance);
    partial void DeleteApplicationSetting(ApplicationSetting instance);
    partial void InsertSalesEmployee(SalesEmployee instance);
    partial void UpdateSalesEmployee(SalesEmployee instance);
    partial void DeleteSalesEmployee(SalesEmployee instance);
    partial void InsertallocationLog(allocationLog instance);
    partial void UpdateallocationLog(allocationLog instance);
    partial void DeleteallocationLog(allocationLog instance);
    partial void InsertCustomerAllocation(CustomerAllocation instance);
    partial void UpdateCustomerAllocation(CustomerAllocation instance);
    partial void DeleteCustomerAllocation(CustomerAllocation instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertAnimationCustomerGroup(AnimationCustomerGroup instance);
    partial void UpdateAnimationCustomerGroup(AnimationCustomerGroup instance);
    partial void DeleteAnimationCustomerGroup(AnimationCustomerGroup instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertLockout(Lockout instance);
    partial void UpdateLockout(Lockout instance);
    partial void DeleteLockout(Lockout instance);
    #endregion
		
		public DbDataContext() : 
				base(global::LorealOptimiseData.Properties.Settings.Default.LorealOptimiseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AnimationType> AnimationTypes
		{
			get
			{
				return this.GetTable<AnimationType>();
			}
		}
		
		public System.Data.Linq.Table<AuditAlert> AuditAlerts
		{
			get
			{
				return this.GetTable<AuditAlert>();
			}
		}
		
		public System.Data.Linq.Table<BrandAxe> BrandAxes
		{
			get
			{
				return this.GetTable<BrandAxe>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<CustomerBrandExclusion> CustomerBrandExclusions
		{
			get
			{
				return this.GetTable<CustomerBrandExclusion>();
			}
		}
		
		public System.Data.Linq.Table<CustomerCapacity> CustomerCapacities
		{
			get
			{
				return this.GetTable<CustomerCapacity>();
			}
		}
		
		public System.Data.Linq.Table<CustomerCategory> CustomerCategories
		{
			get
			{
				return this.GetTable<CustomerCategory>();
			}
		}
		
		public System.Data.Linq.Table<CustomerGroupItemType> CustomerGroupItemTypes
		{
			get
			{
				return this.GetTable<CustomerGroupItemType>();
			}
		}
		
		public System.Data.Linq.Table<DistributionChannel> DistributionChannels
		{
			get
			{
				return this.GetTable<DistributionChannel>();
			}
		}
		
		public System.Data.Linq.Table<Division> Divisions
		{
			get
			{
				return this.GetTable<Division>();
			}
		}
		
		public System.Data.Linq.Table<EventLog> EventLogs
		{
			get
			{
				return this.GetTable<EventLog>();
			}
		}
		
		public System.Data.Linq.Table<HistoryLog> HistoryLogs
		{
			get
			{
				return this.GetTable<HistoryLog>();
			}
		}
		
		public System.Data.Linq.Table<ItemGroup> ItemGroups
		{
			get
			{
				return this.GetTable<ItemGroup>();
			}
		}
		
		public System.Data.Linq.Table<ItemType> ItemTypes
		{
			get
			{
				return this.GetTable<ItemType>();
			}
		}
		
		public System.Data.Linq.Table<Multiple> Multiples
		{
			get
			{
				return this.GetTable<Multiple>();
			}
		}
		
		public System.Data.Linq.Table<OrderType> OrderTypes
		{
			get
			{
				return this.GetTable<OrderType>();
			}
		}
		
		public System.Data.Linq.Table<Priority> Priorities
		{
			get
			{
				return this.GetTable<Priority>();
			}
		}
		
		public System.Data.Linq.Table<ProductConfirmed> ProductConfirmeds
		{
			get
			{
				return this.GetTable<ProductConfirmed>();
			}
		}
		
		public System.Data.Linq.Table<ProductReceived> ProductReceiveds
		{
			get
			{
				return this.GetTable<ProductReceived>();
			}
		}
		
		public System.Data.Linq.Table<RetailerType> RetailerTypes
		{
			get
			{
				return this.GetTable<RetailerType>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Sale> Sales
		{
			get
			{
				return this.GetTable<Sale>();
			}
		}
		
		public System.Data.Linq.Table<SalesDrive> SalesDrives
		{
			get
			{
				return this.GetTable<SalesDrive>();
			}
		}
		
		public System.Data.Linq.Table<SalesOrganization> SalesOrganizations
		{
			get
			{
				return this.GetTable<SalesOrganization>();
			}
		}
		
		public System.Data.Linq.Table<Signature> Signatures
		{
			get
			{
				return this.GetTable<Signature>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<SalesArea> SalesAreas
		{
			get
			{
				return this.GetTable<SalesArea>();
			}
		}
		
		public System.Data.Linq.Table<CustomerGroup> CustomerGroups
		{
			get
			{
				return this.GetTable<CustomerGroup>();
			}
		}
		
		public System.Data.Linq.Table<AnimationProductDetail> AnimationProductDetails
		{
			get
			{
				return this.GetTable<AnimationProductDetail>();
			}
		}
		
		public System.Data.Linq.Table<CustomerGroupAllocation> CustomerGroupAllocations
		{
			get
			{
				return this.GetTable<CustomerGroupAllocation>();
			}
		}
		
		public System.Data.Linq.Table<Version> Versions
		{
			get
			{
				return this.GetTable<Version>();
			}
		}
		
		public System.Data.Linq.Table<AnimationProduct> AnimationProducts
		{
			get
			{
				return this.GetTable<AnimationProduct>();
			}
		}
		
		public System.Data.Linq.Table<Animation> Animations
		{
			get
			{
				return this.GetTable<Animation>();
			}
		}
		
		public System.Data.Linq.Table<SystemMessage> SystemMessages
		{
			get
			{
				return this.GetTable<SystemMessage>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationSetting> ApplicationSettings
		{
			get
			{
				return this.GetTable<ApplicationSetting>();
			}
		}
		
		public System.Data.Linq.Table<SalesEmployee> SalesEmployees
		{
			get
			{
				return this.GetTable<SalesEmployee>();
			}
		}
		
		public System.Data.Linq.Table<allocationLog> allocationLogs
		{
			get
			{
				return this.GetTable<allocationLog>();
			}
		}
		
		public System.Data.Linq.Table<CustomerAllocation> CustomerAllocations
		{
			get
			{
				return this.GetTable<CustomerAllocation>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<AnimationCustomerGroup> AnimationCustomerGroups
		{
			get
			{
				return this.GetTable<AnimationCustomerGroup>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Lockout> Lockouts
		{
			get
			{
				return this.GetTable<Lockout>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_AllocationRemainder", IsComposable=true)]
		public System.Nullable<int> calculate_AllocationRemainder([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AnimationProductID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationProductID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationProductID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.RoundWarehouseMultiple", IsComposable=true)]
		public System.Nullable<int> RoundWarehouseMultiple([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> quantity, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> multipleNormal)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), quantity, multipleNormal).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_ListPriceROI", IsComposable=true)]
		public System.Nullable<double> calculate_ListPriceROI([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AnimationProductID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationProductID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DivisionID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> divisionID)
		{
			return ((System.Nullable<double>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationProductID, divisionID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_ListPriceUK", IsComposable=true)]
		public System.Nullable<double> calculate_ListPriceUK([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AnimationProductID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationProductID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DivisionID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> divisionID)
		{
			return ((System.Nullable<double>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationProductID, divisionID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_MonthDelivery", IsComposable=true)]
		public System.Nullable<int> calculate_MonthDelivery([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> productID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> monthNumber)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), productID, monthNumber).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_ProductConfirmed", IsComposable=true)]
		public System.Nullable<int> calculate_ProductConfirmed([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> productID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), productID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_ProductReceived", IsComposable=true)]
		public System.Nullable<int> calculate_ProductReceived([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AnimationProduct", DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationProduct)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationProduct).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_Reliquat", IsComposable=true)]
		public System.Nullable<int> calculate_Reliquat([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> productID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), productID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_TotalAllocation", IsComposable=true)]
		public System.Nullable<int> calculate_TotalAllocation([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AnimationProductID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationProductID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationProductID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_TotalBDCQuantity", IsComposable=true)]
		public System.Nullable<int> calculate_TotalBDCQuantity([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AnimationProductID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationProductID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationProductID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_TotalCIV", IsComposable=true)]
		public System.Nullable<decimal> calculate_TotalCIV([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AnimationProductID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationProductID)
		{
			return ((System.Nullable<decimal>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationProductID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_TotalForecastQuantity", IsComposable=true)]
		public System.Nullable<int> calculate_TotalForecastQuantity([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AnimationProductID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationProductID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationProductID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_TotalsProductDetail", IsComposable=true)]
		public System.Nullable<int> calculate_TotalsProductDetail([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AnimationProductID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationProductID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationProductID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.countGroupCapacity", IsComposable=true)]
		public System.Nullable<int> countGroupCapacity([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationProductDetailId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> groupId)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationProductDetailId, groupId).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.RoundMultiple", IsComposable=true)]
		public System.Nullable<int> RoundMultiple([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> quantity, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> multipleNormal)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), quantity, multipleNormal).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_ProductDetailTotals", IsComposable=true)]
		public System.Nullable<int> calculate_ProductDetailTotals([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AnimationProductDetail", DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationProductDetail)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationProductDetail).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_TotalAllocationROI", IsComposable=true)]
		public System.Nullable<int> calculate_TotalAllocationROI([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AnimationProductID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationProductID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IDDivision", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iDDivision)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationProductID, iDDivision).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_TotalAllocationUK", IsComposable=true)]
		public System.Nullable<int> calculate_TotalAllocationUK([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AnimationProductID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationProductID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IDDivision", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iDDivision)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationProductID, iDDivision).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_RRP_ROI", IsComposable=true)]
		public System.Nullable<int> calculate_RRP_ROI([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AnimationProductID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationProductID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IDDivision", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iDDivision)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationProductID, iDDivision).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_RRP_UK", IsComposable=true)]
		public System.Nullable<int> calculate_RRP_UK([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AnimationProductID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationProductID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IDDivision", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iDDivision)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationProductID, iDDivision).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_ActiveAnimations", IsComposable=true)]
		public System.Nullable<int> calculate_ActiveAnimations([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AnimationProductID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationProductID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationProductID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_TotalCapacity", IsComposable=true)]
		public System.Nullable<int> calculate_TotalCapacity([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AnimationProductID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationProductID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationProductID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_ProductDetailCustomerTotalCapacity", IsComposable=true)]
		public System.Nullable<int> calculate_ProductDetailCustomerTotalCapacity([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationProductDetailID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> customerID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationProductDetailID, customerID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.up_createOrderExport")]
		public int up_createOrderExport([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.up_animationCheck")]
		public int up_animationCheck([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> countOfErrors, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] ref string errorMsg)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationID, countOfErrors, errorMsg);
			countOfErrors = ((System.Nullable<int>)(result.GetParameterValue(1)));
			errorMsg = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CalculateTotals")]
		public int CalculateTotals([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AnimationProduct", DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationProduct, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IDDivision", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iDDivision, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TotalCapacity", DbType="Int")] ref System.Nullable<int> totalCapacity, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TotalBDCQuantity", DbType="Int")] ref System.Nullable<int> totalBDCQuantity, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TotalForecastQuantity", DbType="Int")] ref System.Nullable<int> totalForecastQuantity, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TotalAllocation", DbType="Int")] ref System.Nullable<int> totalAllocation, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TotalAllocationUK", DbType="Int")] ref System.Nullable<int> totalAllocationUK, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TotalAllocationROI", DbType="Int")] ref System.Nullable<int> totalAllocationROI, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RrpUK", DbType="Float")] ref System.Nullable<double> rrpUK, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RrpROI", DbType="Float")] ref System.Nullable<double> rrpROI, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ListPriceUK", DbType="Float")] ref System.Nullable<double> listPriceUK, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ListPriceROI", DbType="Float")] ref System.Nullable<double> listPriceROI, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductRecieved", DbType="Int")] ref System.Nullable<int> productRecieved, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ActiveAnimations", DbType="Int")] ref System.Nullable<int> activeAnimations)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationProduct, iDDivision, totalCapacity, totalBDCQuantity, totalForecastQuantity, totalAllocation, totalAllocationUK, totalAllocationROI, rrpUK, rrpROI, listPriceUK, listPriceROI, productRecieved, activeAnimations);
			totalCapacity = ((System.Nullable<int>)(result.GetParameterValue(2)));
			totalBDCQuantity = ((System.Nullable<int>)(result.GetParameterValue(3)));
			totalForecastQuantity = ((System.Nullable<int>)(result.GetParameterValue(4)));
			totalAllocation = ((System.Nullable<int>)(result.GetParameterValue(5)));
			totalAllocationUK = ((System.Nullable<int>)(result.GetParameterValue(6)));
			totalAllocationROI = ((System.Nullable<int>)(result.GetParameterValue(7)));
			rrpUK = ((System.Nullable<double>)(result.GetParameterValue(8)));
			rrpROI = ((System.Nullable<double>)(result.GetParameterValue(9)));
			listPriceUK = ((System.Nullable<double>)(result.GetParameterValue(10)));
			listPriceROI = ((System.Nullable<double>)(result.GetParameterValue(11)));
			productRecieved = ((System.Nullable<int>)(result.GetParameterValue(12)));
			activeAnimations = ((System.Nullable<int>)(result.GetParameterValue(13)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.up_orderExport", IsComposable=true)]
		public object up_orderExport([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string salesOrganizationCode)
		{
			return ((object)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationID, salesOrganizationCode).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.up_createOrderExport")]
		public int up_createOrderExport1([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.up_GetRetailerType")]
		public ISingleResult<up_GetRetailerTypeResult> up_GetRetailerType([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationID);
			return ((ISingleResult<up_GetRetailerTypeResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_TotalCapacityCustomerAllocation", IsComposable=true)]
		public System.Nullable<int> calculate_TotalCapacityCustomerAllocation([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> customerAllocationID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> getFromCache)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), customerAllocationID, getFromCache).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calculate_TotalCapacityCustomerGroup", IsComposable=true)]
		public System.Nullable<int> calculate_TotalCapacityCustomerGroup([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> customerGroupAllocationID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> getFromCache)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), customerGroupAllocationID, getFromCache).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.up_mergeProducts")]
		public int up_mergeProducts([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> mergeIntoProductID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> mergedProductID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), mergeIntoProductID, mergedProductID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.up_generateCapacities")]
		public int up_generateCapacities([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationType, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string itemTypeList, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> priority, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string customerList, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> capacity, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> delete)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationType, itemTypeList, priority, customerList, capacity, delete);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.countSale", IsComposable=true)]
		public System.Nullable<double> countSale([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> customerId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> customerGroupId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> brandAxeId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> saleAreaAnimationId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationProductDetailId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> signatureId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> customerRetailUplift, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> getFromCache)
		{
			return ((System.Nullable<double>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), customerId, customerGroupId, brandAxeId, saleAreaAnimationId, animationProductDetailId, signatureId, customerRetailUplift, getFromCache).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.up_recreateAllocationsAnimationProduct")]
		public int up_recreateAllocationsAnimationProduct([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationProductID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> withDeletion)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationProductID, withDeletion);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.up_recreateAllocationsAnimation")]
		public int up_recreateAllocationsAnimation([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> animationID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> withDelete)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), animationID, withDelete);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.updateLockouts")]
		public int updateLockouts()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.unlockCurrentLock")]
		public int unlockCurrentLock()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnimationType")]
	public partial class AnimationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private System.Guid _IDDivision;
		
		private bool _Deleted;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private EntitySet<CustomerCapacity> _CustomerCapacities;
		
		private EntitySet<Animation> _Animations;
		
		private EntityRef<Division> _Division;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDDivisionChanging(System.Guid value);
    partial void OnIDDivisionChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public AnimationType()
		{
			this._CustomerCapacities = new EntitySet<CustomerCapacity>(new Action<CustomerCapacity>(this.attach_CustomerCapacities), new Action<CustomerCapacity>(this.detach_CustomerCapacities));
			this._Animations = new EntitySet<Animation>(new Action<Animation>(this.attach_Animations), new Action<Animation>(this.detach_Animations));
			this._Division = default(EntityRef<Division>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDivision", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDDivision
		{
			get
			{
				return this._IDDivision;
			}
			set
			{
				if ((this._IDDivision != value))
				{
					if (this._Division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDivisionChanging(value);
					this.SendPropertyChanging();
					this._IDDivision = value;
					this.SendPropertyChanged("IDDivision");
					this.OnIDDivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnimationType_CustomerCapacity", Storage="_CustomerCapacities", ThisKey="ID", OtherKey="IDAnimationType")]
		public EntitySet<CustomerCapacity> CustomerCapacities
		{
			get
			{
				return this._CustomerCapacities;
			}
			set
			{
				this._CustomerCapacities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnimationType_Animation", Storage="_Animations", ThisKey="ID", OtherKey="IDAnimationType")]
		public EntitySet<Animation> Animations
		{
			get
			{
				return this._Animations;
			}
			set
			{
				this._Animations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_AnimationType", Storage="_Division", ThisKey="IDDivision", OtherKey="ID", IsForeignKey=true)]
		public Division Division
		{
			get
			{
				return this._Division.Entity;
			}
			set
			{
				Division previousValue = this._Division.Entity;
				if (((previousValue != value) 
							|| (this._Division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division.Entity = null;
						previousValue.AnimationTypes.Remove(this);
					}
					this._Division.Entity = value;
					if ((value != null))
					{
						value.AnimationTypes.Add(this);
						this._IDDivision = value.ID;
					}
					else
					{
						this._IDDivision = default(System.Guid);
					}
					this.SendPropertyChanged("Division");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerCapacities(CustomerCapacity entity)
		{
			this.SendPropertyChanging();
			entity.AnimationType = this;
		}
		
		private void detach_CustomerCapacities(CustomerCapacity entity)
		{
			this.SendPropertyChanging();
			entity.AnimationType = null;
		}
		
		private void attach_Animations(Animation entity)
		{
			this.SendPropertyChanging();
			entity.AnimationType = this;
		}
		
		private void detach_Animations(Animation entity)
		{
			this.SendPropertyChanging();
			entity.AnimationType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuditAlert")]
	public partial class AuditAlert : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _AlertType;
		
		private string _AlertDescription;
		
		private System.DateTime _DateCreated;
		
		private System.Guid _IDDivision;
		
		private string _OriginalValue;
		
		private string _NewValue;
		
		private bool _Processed;
		
		private string _Comments;
		
		private EntityRef<Division> _Division;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnAlertTypeChanging(string value);
    partial void OnAlertTypeChanged();
    partial void OnAlertDescriptionChanging(string value);
    partial void OnAlertDescriptionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnIDDivisionChanging(System.Guid value);
    partial void OnIDDivisionChanged();
    partial void OnOriginalValueChanging(string value);
    partial void OnOriginalValueChanged();
    partial void OnNewValueChanging(string value);
    partial void OnNewValueChanged();
    partial void OnProcessedChanging(bool value);
    partial void OnProcessedChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public AuditAlert()
		{
			this._Division = default(EntityRef<Division>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlertType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AlertType
		{
			get
			{
				return this._AlertType;
			}
			set
			{
				if ((this._AlertType != value))
				{
					this.OnAlertTypeChanging(value);
					this.SendPropertyChanging();
					this._AlertType = value;
					this.SendPropertyChanged("AlertType");
					this.OnAlertTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlertDescription", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string AlertDescription
		{
			get
			{
				return this._AlertDescription;
			}
			set
			{
				if ((this._AlertDescription != value))
				{
					this.OnAlertDescriptionChanging(value);
					this.SendPropertyChanging();
					this._AlertDescription = value;
					this.SendPropertyChanged("AlertDescription");
					this.OnAlertDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDivision", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDDivision
		{
			get
			{
				return this._IDDivision;
			}
			set
			{
				if ((this._IDDivision != value))
				{
					if (this._Division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDivisionChanging(value);
					this.SendPropertyChanging();
					this._IDDivision = value;
					this.SendPropertyChanged("IDDivision");
					this.OnIDDivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalValue", DbType="NVarChar(200)")]
		public string OriginalValue
		{
			get
			{
				return this._OriginalValue;
			}
			set
			{
				if ((this._OriginalValue != value))
				{
					this.OnOriginalValueChanging(value);
					this.SendPropertyChanging();
					this._OriginalValue = value;
					this.SendPropertyChanged("OriginalValue");
					this.OnOriginalValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewValue", DbType="NVarChar(200)")]
		public string NewValue
		{
			get
			{
				return this._NewValue;
			}
			set
			{
				if ((this._NewValue != value))
				{
					this.OnNewValueChanging(value);
					this.SendPropertyChanging();
					this._NewValue = value;
					this.SendPropertyChanged("NewValue");
					this.OnNewValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Processed", DbType="Bit NOT NULL")]
		public bool Processed
		{
			get
			{
				return this._Processed;
			}
			set
			{
				if ((this._Processed != value))
				{
					this.OnProcessedChanging(value);
					this.SendPropertyChanging();
					this._Processed = value;
					this.SendPropertyChanged("Processed");
					this.OnProcessedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NVarChar(2000)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_AuditAlert", Storage="_Division", ThisKey="IDDivision", OtherKey="ID", IsForeignKey=true)]
		public Division Division
		{
			get
			{
				return this._Division.Entity;
			}
			set
			{
				Division previousValue = this._Division.Entity;
				if (((previousValue != value) 
							|| (this._Division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division.Entity = null;
						previousValue.AuditAlerts.Remove(this);
					}
					this._Division.Entity = value;
					if ((value != null))
					{
						value.AuditAlerts.Add(this);
						this._IDDivision = value.ID;
					}
					else
					{
						this._IDDivision = default(System.Guid);
					}
					this.SendPropertyChanged("Division");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BrandAxe")]
	public partial class BrandAxe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _IDDivision;
		
		private string _Name;
		
		private string _Code;
		
		private bool _Brand;
		
		private bool _Deleted;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private bool _Manual;
		
		private EntitySet<CustomerBrandExclusion> _CustomerBrandExclusions;
		
		private EntitySet<Sale> _Sales;
		
		private EntitySet<AnimationProduct> _AnimationProducts;
		
		private EntityRef<Signature> _Signature;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIDSignatureChanging(System.Guid value);
    partial void OnIDSignatureChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnBrandChanging(bool value);
    partial void OnBrandChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnManualChanging(bool value);
    partial void OnManualChanged();
    #endregion
		
		public BrandAxe()
		{
			this._CustomerBrandExclusions = new EntitySet<CustomerBrandExclusion>(new Action<CustomerBrandExclusion>(this.attach_CustomerBrandExclusions), new Action<CustomerBrandExclusion>(this.detach_CustomerBrandExclusions));
			this._Sales = new EntitySet<Sale>(new Action<Sale>(this.attach_Sales), new Action<Sale>(this.detach_Sales));
			this._AnimationProducts = new EntitySet<AnimationProduct>(new Action<AnimationProduct>(this.attach_AnimationProducts), new Action<AnimationProduct>(this.detach_AnimationProducts));
			this._Signature = default(EntityRef<Signature>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDivision", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDSignature
		{
			get
			{
				return this._IDDivision;
			}
			set
			{
				if ((this._IDDivision != value))
				{
					if (this._Signature.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSignatureChanging(value);
					this.SendPropertyChanging();
					this._IDDivision = value;
					this.SendPropertyChanged("IDSignature");
					this.OnIDSignatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand", DbType="Bit NOT NULL")]
		public bool Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manual", DbType="Bit NOT NULL")]
		public bool Manual
		{
			get
			{
				return this._Manual;
			}
			set
			{
				if ((this._Manual != value))
				{
					this.OnManualChanging(value);
					this.SendPropertyChanging();
					this._Manual = value;
					this.SendPropertyChanged("Manual");
					this.OnManualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrandAxe_CustomerBrandExclusion", Storage="_CustomerBrandExclusions", ThisKey="ID", OtherKey="IDBrandAxe")]
		public EntitySet<CustomerBrandExclusion> CustomerBrandExclusions
		{
			get
			{
				return this._CustomerBrandExclusions;
			}
			set
			{
				this._CustomerBrandExclusions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrandAxe_Sale", Storage="_Sales", ThisKey="ID", OtherKey="IDBrandAxe")]
		public EntitySet<Sale> Sales
		{
			get
			{
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrandAxe_AnimationProduct", Storage="_AnimationProducts", ThisKey="ID", OtherKey="IDBrandAxe")]
		public EntitySet<AnimationProduct> AnimationProducts
		{
			get
			{
				return this._AnimationProducts;
			}
			set
			{
				this._AnimationProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Signature_BrandAxe", Storage="_Signature", ThisKey="IDSignature", OtherKey="ID", IsForeignKey=true)]
		public Signature Signature
		{
			get
			{
				return this._Signature.Entity;
			}
			set
			{
				Signature previousValue = this._Signature.Entity;
				if (((previousValue != value) 
							|| (this._Signature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Signature.Entity = null;
						previousValue.BrandAxes.Remove(this);
					}
					this._Signature.Entity = value;
					if ((value != null))
					{
						value.BrandAxes.Add(this);
						this._IDDivision = value.ID;
					}
					else
					{
						this._IDDivision = default(System.Guid);
					}
					this.SendPropertyChanged("Signature");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerBrandExclusions(CustomerBrandExclusion entity)
		{
			this.SendPropertyChanging();
			entity.BrandAxe = this;
		}
		
		private void detach_CustomerBrandExclusions(CustomerBrandExclusion entity)
		{
			this.SendPropertyChanging();
			entity.BrandAxe = null;
		}
		
		private void attach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.BrandAxe = this;
		}
		
		private void detach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.BrandAxe = null;
		}
		
		private void attach_AnimationProducts(AnimationProduct entity)
		{
			this.SendPropertyChanging();
			entity.BrandAxe = this;
		}
		
		private void detach_AnimationProducts(AnimationProduct entity)
		{
			this.SendPropertyChanging();
			entity.BrandAxe = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private System.Guid _IDDivision;
		
		private bool _Deleted;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private EntitySet<CustomerCategory> _CustomerCategories;
		
		private EntitySet<AnimationProduct> _AnimationProducts;
		
		private EntityRef<Division> _Division;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDDivisionChanging(System.Guid value);
    partial void OnIDDivisionChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Category()
		{
			this._CustomerCategories = new EntitySet<CustomerCategory>(new Action<CustomerCategory>(this.attach_CustomerCategories), new Action<CustomerCategory>(this.detach_CustomerCategories));
			this._AnimationProducts = new EntitySet<AnimationProduct>(new Action<AnimationProduct>(this.attach_AnimationProducts), new Action<AnimationProduct>(this.detach_AnimationProducts));
			this._Division = default(EntityRef<Division>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDivision", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDDivision
		{
			get
			{
				return this._IDDivision;
			}
			set
			{
				if ((this._IDDivision != value))
				{
					if (this._Division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDivisionChanging(value);
					this.SendPropertyChanging();
					this._IDDivision = value;
					this.SendPropertyChanged("IDDivision");
					this.OnIDDivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CustomerCategory", Storage="_CustomerCategories", ThisKey="ID", OtherKey="IDCategory")]
		public EntitySet<CustomerCategory> CustomerCategories
		{
			get
			{
				return this._CustomerCategories;
			}
			set
			{
				this._CustomerCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_AnimationProduct", Storage="_AnimationProducts", ThisKey="ID", OtherKey="IDCategory")]
		public EntitySet<AnimationProduct> AnimationProducts
		{
			get
			{
				return this._AnimationProducts;
			}
			set
			{
				this._AnimationProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Category", Storage="_Division", ThisKey="IDDivision", OtherKey="ID", IsForeignKey=true)]
		public Division Division
		{
			get
			{
				return this._Division.Entity;
			}
			set
			{
				Division previousValue = this._Division.Entity;
				if (((previousValue != value) 
							|| (this._Division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._Division.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._IDDivision = value.ID;
					}
					else
					{
						this._IDDivision = default(System.Guid);
					}
					this.SendPropertyChanged("Division");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerCategories(CustomerCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_CustomerCategories(CustomerCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_AnimationProducts(AnimationProduct entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_AnimationProducts(AnimationProduct entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerBrandExclusion")]
	public partial class CustomerBrandExclusion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _IDCustomer;
		
		private System.Guid _IDBrandAxe;
		
		private bool _Excluded;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private EntityRef<BrandAxe> _BrandAxe;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIDCustomerChanging(System.Guid value);
    partial void OnIDCustomerChanged();
    partial void OnIDBrandAxeChanging(System.Guid value);
    partial void OnIDBrandAxeChanged();
    partial void OnExcludedChanging(bool value);
    partial void OnExcludedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public CustomerBrandExclusion()
		{
			this._BrandAxe = default(EntityRef<BrandAxe>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBrandAxe", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDBrandAxe
		{
			get
			{
				return this._IDBrandAxe;
			}
			set
			{
				if ((this._IDBrandAxe != value))
				{
					if (this._BrandAxe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDBrandAxeChanging(value);
					this.SendPropertyChanging();
					this._IDBrandAxe = value;
					this.SendPropertyChanged("IDBrandAxe");
					this.OnIDBrandAxeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Excluded", DbType="Bit NOT NULL")]
		public bool Excluded
		{
			get
			{
				return this._Excluded;
			}
			set
			{
				if ((this._Excluded != value))
				{
					this.OnExcludedChanging(value);
					this.SendPropertyChanging();
					this._Excluded = value;
					this.SendPropertyChanged("Excluded");
					this.OnExcludedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrandAxe_CustomerBrandExclusion", Storage="_BrandAxe", ThisKey="IDBrandAxe", OtherKey="ID", IsForeignKey=true)]
		public BrandAxe BrandAxe
		{
			get
			{
				return this._BrandAxe.Entity;
			}
			set
			{
				BrandAxe previousValue = this._BrandAxe.Entity;
				if (((previousValue != value) 
							|| (this._BrandAxe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BrandAxe.Entity = null;
						previousValue.CustomerBrandExclusions.Remove(this);
					}
					this._BrandAxe.Entity = value;
					if ((value != null))
					{
						value.CustomerBrandExclusions.Add(this);
						this._IDBrandAxe = value.ID;
					}
					else
					{
						this._IDBrandAxe = default(System.Guid);
					}
					this.SendPropertyChanged("BrandAxe");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerBrandExclusion", Storage="_Customer", ThisKey="IDCustomer", OtherKey="ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustomerBrandExclusions.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustomerBrandExclusions.Add(this);
						this._IDCustomer = value.ID;
					}
					else
					{
						this._IDCustomer = default(System.Guid);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerCapacity")]
	public partial class CustomerCapacity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _IDCustomer;
		
		private System.Guid _IDAnimationType;
		
		private System.Guid _IDPriority;
		
		private System.Guid _IDItemType;
		
		private System.Nullable<int> _Capacity;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private EntityRef<AnimationType> _AnimationType;
		
		private EntityRef<ItemType> _ItemType;
		
		private EntityRef<Priority> _Priority;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIDCustomerChanging(System.Guid value);
    partial void OnIDCustomerChanged();
    partial void OnIDAnimationTypeChanging(System.Guid value);
    partial void OnIDAnimationTypeChanged();
    partial void OnIDPriorityChanging(System.Guid value);
    partial void OnIDPriorityChanged();
    partial void OnIDItemTypeChanging(System.Guid value);
    partial void OnIDItemTypeChanged();
    partial void OnCapacityChanging(System.Nullable<int> value);
    partial void OnCapacityChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public CustomerCapacity()
		{
			this._AnimationType = default(EntityRef<AnimationType>);
			this._ItemType = default(EntityRef<ItemType>);
			this._Priority = default(EntityRef<Priority>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAnimationType", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDAnimationType
		{
			get
			{
				return this._IDAnimationType;
			}
			set
			{
				if ((this._IDAnimationType != value))
				{
					if (this._AnimationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAnimationTypeChanging(value);
					this.SendPropertyChanging();
					this._IDAnimationType = value;
					this.SendPropertyChanged("IDAnimationType");
					this.OnIDAnimationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPriority", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDPriority
		{
			get
			{
				return this._IDPriority;
			}
			set
			{
				if ((this._IDPriority != value))
				{
					if (this._Priority.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPriorityChanging(value);
					this.SendPropertyChanging();
					this._IDPriority = value;
					this.SendPropertyChanged("IDPriority");
					this.OnIDPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDItemType", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDItemType
		{
			get
			{
				return this._IDItemType;
			}
			set
			{
				if ((this._IDItemType != value))
				{
					if (this._ItemType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDItemTypeChanging(value);
					this.SendPropertyChanging();
					this._IDItemType = value;
					this.SendPropertyChanged("IDItemType");
					this.OnIDItemTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int")]
		public System.Nullable<int> Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnimationType_CustomerCapacity", Storage="_AnimationType", ThisKey="IDAnimationType", OtherKey="ID", IsForeignKey=true)]
		public AnimationType AnimationType
		{
			get
			{
				return this._AnimationType.Entity;
			}
			set
			{
				AnimationType previousValue = this._AnimationType.Entity;
				if (((previousValue != value) 
							|| (this._AnimationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AnimationType.Entity = null;
						previousValue.CustomerCapacities.Remove(this);
					}
					this._AnimationType.Entity = value;
					if ((value != null))
					{
						value.CustomerCapacities.Add(this);
						this._IDAnimationType = value.ID;
					}
					else
					{
						this._IDAnimationType = default(System.Guid);
					}
					this.SendPropertyChanged("AnimationType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemType_CustomerCapacity", Storage="_ItemType", ThisKey="IDItemType", OtherKey="ID", IsForeignKey=true)]
		public ItemType ItemType
		{
			get
			{
				return this._ItemType.Entity;
			}
			set
			{
				ItemType previousValue = this._ItemType.Entity;
				if (((previousValue != value) 
							|| (this._ItemType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemType.Entity = null;
						previousValue.CustomerCapacities.Remove(this);
					}
					this._ItemType.Entity = value;
					if ((value != null))
					{
						value.CustomerCapacities.Add(this);
						this._IDItemType = value.ID;
					}
					else
					{
						this._IDItemType = default(System.Guid);
					}
					this.SendPropertyChanged("ItemType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Priority_CustomerCapacity", Storage="_Priority", ThisKey="IDPriority", OtherKey="ID", IsForeignKey=true)]
		public Priority Priority
		{
			get
			{
				return this._Priority.Entity;
			}
			set
			{
				Priority previousValue = this._Priority.Entity;
				if (((previousValue != value) 
							|| (this._Priority.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Priority.Entity = null;
						previousValue.CustomerCapacities.Remove(this);
					}
					this._Priority.Entity = value;
					if ((value != null))
					{
						value.CustomerCapacities.Add(this);
						this._IDPriority = value.ID;
					}
					else
					{
						this._IDPriority = default(System.Guid);
					}
					this.SendPropertyChanged("Priority");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerCapacity", Storage="_Customer", ThisKey="IDCustomer", OtherKey="ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustomerCapacities.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustomerCapacities.Add(this);
						this._IDCustomer = value.ID;
					}
					else
					{
						this._IDCustomer = default(System.Guid);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerCategory")]
	public partial class CustomerCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _IDCustomer;
		
		private System.Guid _IDCategory;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIDCustomerChanging(System.Guid value);
    partial void OnIDCustomerChanged();
    partial void OnIDCategoryChanging(System.Guid value);
    partial void OnIDCategoryChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public CustomerCategory()
		{
			this._Category = default(EntityRef<Category>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCategory", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDCategory
		{
			get
			{
				return this._IDCategory;
			}
			set
			{
				if ((this._IDCategory != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCategoryChanging(value);
					this.SendPropertyChanging();
					this._IDCategory = value;
					this.SendPropertyChanged("IDCategory");
					this.OnIDCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CustomerCategory", Storage="_Category", ThisKey="IDCategory", OtherKey="ID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.CustomerCategories.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.CustomerCategories.Add(this);
						this._IDCategory = value.ID;
					}
					else
					{
						this._IDCategory = default(System.Guid);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerCategory", Storage="_Customer", ThisKey="IDCustomer", OtherKey="ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustomerCategories.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustomerCategories.Add(this);
						this._IDCustomer = value.ID;
					}
					else
					{
						this._IDCustomer = default(System.Guid);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerGroupItemType")]
	public partial class CustomerGroupItemType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _IDCustomerGroup;
		
		private System.Guid _IDItemType;
		
		private bool _WarehouseAllocation;
		
		private System.Nullable<System.Guid> _IDCustomer;
		
		private bool _IncludeInSAPOrders;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private EntityRef<ItemType> _ItemType;
		
		private EntityRef<CustomerGroup> _CustomerGroup;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIDCustomerGroupChanging(System.Guid value);
    partial void OnIDCustomerGroupChanged();
    partial void OnIDItemTypeChanging(System.Guid value);
    partial void OnIDItemTypeChanged();
    partial void OnWarehouseAllocationChanging(bool value);
    partial void OnWarehouseAllocationChanged();
    partial void OnIDCustomerChanging(System.Nullable<System.Guid> value);
    partial void OnIDCustomerChanged();
    partial void OnIncludeInSAPOrdersChanging(bool value);
    partial void OnIncludeInSAPOrdersChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public CustomerGroupItemType()
		{
			this._ItemType = default(EntityRef<ItemType>);
			this._CustomerGroup = default(EntityRef<CustomerGroup>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomerGroup", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDCustomerGroup
		{
			get
			{
				return this._IDCustomerGroup;
			}
			set
			{
				if ((this._IDCustomerGroup != value))
				{
					if (this._CustomerGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerGroupChanging(value);
					this.SendPropertyChanging();
					this._IDCustomerGroup = value;
					this.SendPropertyChanged("IDCustomerGroup");
					this.OnIDCustomerGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDItemType", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDItemType
		{
			get
			{
				return this._IDItemType;
			}
			set
			{
				if ((this._IDItemType != value))
				{
					if (this._ItemType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDItemTypeChanging(value);
					this.SendPropertyChanging();
					this._IDItemType = value;
					this.SendPropertyChanged("IDItemType");
					this.OnIDItemTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseAllocation", DbType="Bit NOT NULL")]
		public bool WarehouseAllocation
		{
			get
			{
				return this._WarehouseAllocation;
			}
			set
			{
				if ((this._WarehouseAllocation != value))
				{
					this.OnWarehouseAllocationChanging(value);
					this.SendPropertyChanging();
					this._WarehouseAllocation = value;
					this.SendPropertyChanged("WarehouseAllocation");
					this.OnWarehouseAllocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncludeInSAPOrders", DbType="Bit NOT NULL")]
		public bool IncludeInSAPOrders
		{
			get
			{
				return this._IncludeInSAPOrders;
			}
			set
			{
				if ((this._IncludeInSAPOrders != value))
				{
					this.OnIncludeInSAPOrdersChanging(value);
					this.SendPropertyChanging();
					this._IncludeInSAPOrders = value;
					this.SendPropertyChanged("IncludeInSAPOrders");
					this.OnIncludeInSAPOrdersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemType_CustomerGroupItemType", Storage="_ItemType", ThisKey="IDItemType", OtherKey="ID", IsForeignKey=true)]
		public ItemType ItemType
		{
			get
			{
				return this._ItemType.Entity;
			}
			set
			{
				ItemType previousValue = this._ItemType.Entity;
				if (((previousValue != value) 
							|| (this._ItemType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemType.Entity = null;
						previousValue.CustomerGroupItemTypes.Remove(this);
					}
					this._ItemType.Entity = value;
					if ((value != null))
					{
						value.CustomerGroupItemTypes.Add(this);
						this._IDItemType = value.ID;
					}
					else
					{
						this._IDItemType = default(System.Guid);
					}
					this.SendPropertyChanged("ItemType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerGroup_CustomerGroupItemType", Storage="_CustomerGroup", ThisKey="IDCustomerGroup", OtherKey="ID", IsForeignKey=true)]
		public CustomerGroup CustomerGroup
		{
			get
			{
				return this._CustomerGroup.Entity;
			}
			set
			{
				CustomerGroup previousValue = this._CustomerGroup.Entity;
				if (((previousValue != value) 
							|| (this._CustomerGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerGroup.Entity = null;
						previousValue.CustomerGroupItemTypes.Remove(this);
					}
					this._CustomerGroup.Entity = value;
					if ((value != null))
					{
						value.CustomerGroupItemTypes.Add(this);
						this._IDCustomerGroup = value.ID;
					}
					else
					{
						this._IDCustomerGroup = default(System.Guid);
					}
					this.SendPropertyChanged("CustomerGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerGroupItemType", Storage="_Customer", ThisKey="IDCustomer", OtherKey="ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustomerGroupItemTypes.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustomerGroupItemTypes.Add(this);
						this._IDCustomer = value.ID;
					}
					else
					{
						this._IDCustomer = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DistributionChannel")]
	public partial class DistributionChannel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _Code;
		
		private bool _Deleted;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private EntitySet<SalesArea> _SalesAreas;
		
		private EntitySet<Animation> _Animations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public DistributionChannel()
		{
			this._SalesAreas = new EntitySet<SalesArea>(new Action<SalesArea>(this.attach_SalesAreas), new Action<SalesArea>(this.detach_SalesAreas));
			this._Animations = new EntitySet<Animation>(new Action<Animation>(this.attach_Animations), new Action<Animation>(this.detach_Animations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DistributionChannel_SalesArea", Storage="_SalesAreas", ThisKey="ID", OtherKey="IDDistributionChannel")]
		public EntitySet<SalesArea> SalesAreas
		{
			get
			{
				return this._SalesAreas;
			}
			set
			{
				this._SalesAreas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DistributionChannel_Animation", Storage="_Animations", ThisKey="ID", OtherKey="IDDistributionChannel_Order")]
		public EntitySet<Animation> Animations
		{
			get
			{
				return this._Animations;
			}
			set
			{
				this._Animations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SalesAreas(SalesArea entity)
		{
			this.SendPropertyChanging();
			entity.DistributionChannel = this;
		}
		
		private void detach_SalesAreas(SalesArea entity)
		{
			this.SendPropertyChanging();
			entity.DistributionChannel = null;
		}
		
		private void attach_Animations(Animation entity)
		{
			this.SendPropertyChanging();
			entity.DistributionChannel = this;
		}
		
		private void detach_Animations(Animation entity)
		{
			this.SendPropertyChanging();
			entity.DistributionChannel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Division")]
	public partial class Division : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _Code;
		
		private bool _AllocateByBrand;
		
		private bool _AllocateByAxe;
		
		private bool _Deleted;
		
		private string _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntitySet<AnimationType> _AnimationTypes;
		
		private EntitySet<AuditAlert> _AuditAlerts;
		
		private EntitySet<Category> _Categories;
		
		private EntitySet<ItemGroup> _ItemGroups;
		
		private EntitySet<ItemType> _ItemTypes;
		
		private EntitySet<OrderType> _OrderTypes;
		
		private EntitySet<Priority> _Priorities;
		
		private EntitySet<RetailerType> _RetailerTypes;
		
		private EntitySet<SalesDrive> _SalesDrives;
		
		private EntitySet<Signature> _Signatures;
		
		private EntitySet<UserRole> _UserRoles;
		
		private EntitySet<SalesArea> _SalesAreas;
		
		private EntitySet<ApplicationSetting> _ApplicationSettings;
		
		private EntitySet<SalesEmployee> _SalesEmployees;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnAllocateByBrandChanging(bool value);
    partial void OnAllocateByBrandChanged();
    partial void OnAllocateByAxeChanging(bool value);
    partial void OnAllocateByAxeChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Division()
		{
			this._AnimationTypes = new EntitySet<AnimationType>(new Action<AnimationType>(this.attach_AnimationTypes), new Action<AnimationType>(this.detach_AnimationTypes));
			this._AuditAlerts = new EntitySet<AuditAlert>(new Action<AuditAlert>(this.attach_AuditAlerts), new Action<AuditAlert>(this.detach_AuditAlerts));
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._ItemGroups = new EntitySet<ItemGroup>(new Action<ItemGroup>(this.attach_ItemGroups), new Action<ItemGroup>(this.detach_ItemGroups));
			this._ItemTypes = new EntitySet<ItemType>(new Action<ItemType>(this.attach_ItemTypes), new Action<ItemType>(this.detach_ItemTypes));
			this._OrderTypes = new EntitySet<OrderType>(new Action<OrderType>(this.attach_OrderTypes), new Action<OrderType>(this.detach_OrderTypes));
			this._Priorities = new EntitySet<Priority>(new Action<Priority>(this.attach_Priorities), new Action<Priority>(this.detach_Priorities));
			this._RetailerTypes = new EntitySet<RetailerType>(new Action<RetailerType>(this.attach_RetailerTypes), new Action<RetailerType>(this.detach_RetailerTypes));
			this._SalesDrives = new EntitySet<SalesDrive>(new Action<SalesDrive>(this.attach_SalesDrives), new Action<SalesDrive>(this.detach_SalesDrives));
			this._Signatures = new EntitySet<Signature>(new Action<Signature>(this.attach_Signatures), new Action<Signature>(this.detach_Signatures));
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			this._SalesAreas = new EntitySet<SalesArea>(new Action<SalesArea>(this.attach_SalesAreas), new Action<SalesArea>(this.detach_SalesAreas));
			this._ApplicationSettings = new EntitySet<ApplicationSetting>(new Action<ApplicationSetting>(this.attach_ApplicationSettings), new Action<ApplicationSetting>(this.detach_ApplicationSettings));
			this._SalesEmployees = new EntitySet<SalesEmployee>(new Action<SalesEmployee>(this.attach_SalesEmployees), new Action<SalesEmployee>(this.detach_SalesEmployees));
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllocateByBrand", DbType="Bit NOT NULL")]
		public bool AllocateByBrand
		{
			get
			{
				return this._AllocateByBrand;
			}
			set
			{
				if ((this._AllocateByBrand != value))
				{
					this.OnAllocateByBrandChanging(value);
					this.SendPropertyChanging();
					this._AllocateByBrand = value;
					this.SendPropertyChanged("AllocateByBrand");
					this.OnAllocateByBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllocateByAxe", DbType="Bit NOT NULL")]
		public bool AllocateByAxe
		{
			get
			{
				return this._AllocateByAxe;
			}
			set
			{
				if ((this._AllocateByAxe != value))
				{
					this.OnAllocateByAxeChanging(value);
					this.SendPropertyChanging();
					this._AllocateByAxe = value;
					this.SendPropertyChanged("AllocateByAxe");
					this.OnAllocateByAxeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_AnimationType", Storage="_AnimationTypes", ThisKey="ID", OtherKey="IDDivision")]
		public EntitySet<AnimationType> AnimationTypes
		{
			get
			{
				return this._AnimationTypes;
			}
			set
			{
				this._AnimationTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_AuditAlert", Storage="_AuditAlerts", ThisKey="ID", OtherKey="IDDivision")]
		public EntitySet<AuditAlert> AuditAlerts
		{
			get
			{
				return this._AuditAlerts;
			}
			set
			{
				this._AuditAlerts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Category", Storage="_Categories", ThisKey="ID", OtherKey="IDDivision")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_ItemGroup", Storage="_ItemGroups", ThisKey="ID", OtherKey="IDDivision")]
		public EntitySet<ItemGroup> ItemGroups
		{
			get
			{
				return this._ItemGroups;
			}
			set
			{
				this._ItemGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_ItemType", Storage="_ItemTypes", ThisKey="ID", OtherKey="IDDivision")]
		public EntitySet<ItemType> ItemTypes
		{
			get
			{
				return this._ItemTypes;
			}
			set
			{
				this._ItemTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_OrderType", Storage="_OrderTypes", ThisKey="ID", OtherKey="IDDivision")]
		public EntitySet<OrderType> OrderTypes
		{
			get
			{
				return this._OrderTypes;
			}
			set
			{
				this._OrderTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Priority", Storage="_Priorities", ThisKey="ID", OtherKey="IDDivision")]
		public EntitySet<Priority> Priorities
		{
			get
			{
				return this._Priorities;
			}
			set
			{
				this._Priorities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_RetailerType", Storage="_RetailerTypes", ThisKey="ID", OtherKey="IDDivision")]
		public EntitySet<RetailerType> RetailerTypes
		{
			get
			{
				return this._RetailerTypes;
			}
			set
			{
				this._RetailerTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_SalesDrive", Storage="_SalesDrives", ThisKey="ID", OtherKey="IDDivision")]
		public EntitySet<SalesDrive> SalesDrives
		{
			get
			{
				return this._SalesDrives;
			}
			set
			{
				this._SalesDrives.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Signature", Storage="_Signatures", ThisKey="ID", OtherKey="IDDivision")]
		public EntitySet<Signature> Signatures
		{
			get
			{
				return this._Signatures;
			}
			set
			{
				this._Signatures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_UserRole", Storage="_UserRoles", ThisKey="ID", OtherKey="IDDivision")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_SalesArea", Storage="_SalesAreas", ThisKey="ID", OtherKey="IDDivision")]
		public EntitySet<SalesArea> SalesAreas
		{
			get
			{
				return this._SalesAreas;
			}
			set
			{
				this._SalesAreas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_ApplicationSetting", Storage="_ApplicationSettings", ThisKey="ID", OtherKey="IDDivision")]
		public EntitySet<ApplicationSetting> ApplicationSettings
		{
			get
			{
				return this._ApplicationSettings;
			}
			set
			{
				this._ApplicationSettings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_SalesEmployee", Storage="_SalesEmployees", ThisKey="ID", OtherKey="IDDivision")]
		public EntitySet<SalesEmployee> SalesEmployees
		{
			get
			{
				return this._SalesEmployees;
			}
			set
			{
				this._SalesEmployees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Product", Storage="_Products", ThisKey="ID", OtherKey="IDDivision")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AnimationTypes(AnimationType entity)
		{
			this.SendPropertyChanging();
			entity.Division = this;
		}
		
		private void detach_AnimationTypes(AnimationType entity)
		{
			this.SendPropertyChanging();
			entity.Division = null;
		}
		
		private void attach_AuditAlerts(AuditAlert entity)
		{
			this.SendPropertyChanging();
			entity.Division = this;
		}
		
		private void detach_AuditAlerts(AuditAlert entity)
		{
			this.SendPropertyChanging();
			entity.Division = null;
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Division = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Division = null;
		}
		
		private void attach_ItemGroups(ItemGroup entity)
		{
			this.SendPropertyChanging();
			entity.Division = this;
		}
		
		private void detach_ItemGroups(ItemGroup entity)
		{
			this.SendPropertyChanging();
			entity.Division = null;
		}
		
		private void attach_ItemTypes(ItemType entity)
		{
			this.SendPropertyChanging();
			entity.Division = this;
		}
		
		private void detach_ItemTypes(ItemType entity)
		{
			this.SendPropertyChanging();
			entity.Division = null;
		}
		
		private void attach_OrderTypes(OrderType entity)
		{
			this.SendPropertyChanging();
			entity.Division = this;
		}
		
		private void detach_OrderTypes(OrderType entity)
		{
			this.SendPropertyChanging();
			entity.Division = null;
		}
		
		private void attach_Priorities(Priority entity)
		{
			this.SendPropertyChanging();
			entity.Division = this;
		}
		
		private void detach_Priorities(Priority entity)
		{
			this.SendPropertyChanging();
			entity.Division = null;
		}
		
		private void attach_RetailerTypes(RetailerType entity)
		{
			this.SendPropertyChanging();
			entity.Division = this;
		}
		
		private void detach_RetailerTypes(RetailerType entity)
		{
			this.SendPropertyChanging();
			entity.Division = null;
		}
		
		private void attach_SalesDrives(SalesDrive entity)
		{
			this.SendPropertyChanging();
			entity.Division = this;
		}
		
		private void detach_SalesDrives(SalesDrive entity)
		{
			this.SendPropertyChanging();
			entity.Division = null;
		}
		
		private void attach_Signatures(Signature entity)
		{
			this.SendPropertyChanging();
			entity.Division = this;
		}
		
		private void detach_Signatures(Signature entity)
		{
			this.SendPropertyChanging();
			entity.Division = null;
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Division = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Division = null;
		}
		
		private void attach_SalesAreas(SalesArea entity)
		{
			this.SendPropertyChanging();
			entity.Division = this;
		}
		
		private void detach_SalesAreas(SalesArea entity)
		{
			this.SendPropertyChanging();
			entity.Division = null;
		}
		
		private void attach_ApplicationSettings(ApplicationSetting entity)
		{
			this.SendPropertyChanging();
			entity.Division = this;
		}
		
		private void detach_ApplicationSettings(ApplicationSetting entity)
		{
			this.SendPropertyChanging();
			entity.Division = null;
		}
		
		private void attach_SalesEmployees(SalesEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Division = this;
		}
		
		private void detach_SalesEmployees(SalesEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Division = null;
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Division = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Division = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventLog")]
	public partial class EventLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Category;
		
		private string _Description;
		
		private System.DateTime _DateCreated;
		
		private string _CreateBy;
		
		private System.Nullable<System.Guid> _IDEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnCreateByChanging(string value);
    partial void OnCreateByChanged();
    partial void OnIDEntityChanging(System.Nullable<System.Guid> value);
    partial void OnIDEntityChanged();
    #endregion
		
		public EventLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CreateBy
		{
			get
			{
				return this._CreateBy;
			}
			set
			{
				if ((this._CreateBy != value))
				{
					this.OnCreateByChanging(value);
					this.SendPropertyChanging();
					this._CreateBy = value;
					this.SendPropertyChanged("CreateBy");
					this.OnCreateByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[IDEntity]", Storage="_IDEntity", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDEntity
		{
			get
			{
				return this._IDEntity;
			}
			set
			{
				if ((this._IDEntity != value))
				{
					this.OnIDEntityChanging(value);
					this.SendPropertyChanging();
					this._IDEntity = value;
					this.SendPropertyChanged("IDEntity");
					this.OnIDEntityChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HistoryLog")]
	public partial class HistoryLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _TableName;
		
		private string _FieldName;
		
		private System.Nullable<System.Guid> _KeyValue;
		
		private string _TypeOfUpdate;
		
		private string _NewValue;
		
		private string _OldValue;
		
		private string _ModifiedBy;
		
		private System.DateTime _ModifiedDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnTableNameChanging(string value);
    partial void OnTableNameChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnKeyValueChanging(System.Nullable<System.Guid> value);
    partial void OnKeyValueChanged();
    partial void OnTypeOfUpdateChanging(string value);
    partial void OnTypeOfUpdateChanged();
    partial void OnNewValueChanging(string value);
    partial void OnNewValueChanged();
    partial void OnOldValueChanging(string value);
    partial void OnOldValueChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public HistoryLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this.OnTableNameChanging(value);
					this.SendPropertyChanging();
					this._TableName = value;
					this.SendPropertyChanged("TableName");
					this.OnTableNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldName", DbType="NVarChar(50)")]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyValue", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> KeyValue
		{
			get
			{
				return this._KeyValue;
			}
			set
			{
				if ((this._KeyValue != value))
				{
					this.OnKeyValueChanging(value);
					this.SendPropertyChanging();
					this._KeyValue = value;
					this.SendPropertyChanged("KeyValue");
					this.OnKeyValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfUpdate", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeOfUpdate
		{
			get
			{
				return this._TypeOfUpdate;
			}
			set
			{
				if ((this._TypeOfUpdate != value))
				{
					this.OnTypeOfUpdateChanging(value);
					this.SendPropertyChanging();
					this._TypeOfUpdate = value;
					this.SendPropertyChanged("TypeOfUpdate");
					this.OnTypeOfUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewValue", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string NewValue
		{
			get
			{
				return this._NewValue;
			}
			set
			{
				if ((this._NewValue != value))
				{
					this.OnNewValueChanging(value);
					this.SendPropertyChanging();
					this._NewValue = value;
					this.SendPropertyChanged("NewValue");
					this.OnNewValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldValue", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string OldValue
		{
			get
			{
				return this._OldValue;
			}
			set
			{
				if ((this._OldValue != value))
				{
					this.OnOldValueChanging(value);
					this.SendPropertyChanging();
					this._OldValue = value;
					this.SendPropertyChanged("OldValue");
					this.OnOldValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemGroup")]
	public partial class ItemGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private System.Guid _IDDivision;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private EntitySet<AnimationProduct> _AnimationProducts;
		
		private EntityRef<Division> _Division;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDDivisionChanging(System.Guid value);
    partial void OnIDDivisionChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public ItemGroup()
		{
			this._AnimationProducts = new EntitySet<AnimationProduct>(new Action<AnimationProduct>(this.attach_AnimationProducts), new Action<AnimationProduct>(this.detach_AnimationProducts));
			this._Division = default(EntityRef<Division>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDivision", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDDivision
		{
			get
			{
				return this._IDDivision;
			}
			set
			{
				if ((this._IDDivision != value))
				{
					if (this._Division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDivisionChanging(value);
					this.SendPropertyChanging();
					this._IDDivision = value;
					this.SendPropertyChanged("IDDivision");
					this.OnIDDivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemGroup_AnimationProduct", Storage="_AnimationProducts", ThisKey="ID", OtherKey="IDItemGroup")]
		public EntitySet<AnimationProduct> AnimationProducts
		{
			get
			{
				return this._AnimationProducts;
			}
			set
			{
				this._AnimationProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_ItemGroup", Storage="_Division", ThisKey="IDDivision", OtherKey="ID", IsForeignKey=true)]
		public Division Division
		{
			get
			{
				return this._Division.Entity;
			}
			set
			{
				Division previousValue = this._Division.Entity;
				if (((previousValue != value) 
							|| (this._Division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division.Entity = null;
						previousValue.ItemGroups.Remove(this);
					}
					this._Division.Entity = value;
					if ((value != null))
					{
						value.ItemGroups.Add(this);
						this._IDDivision = value.ID;
					}
					else
					{
						this._IDDivision = default(System.Guid);
					}
					this.SendPropertyChanged("Division");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AnimationProducts(AnimationProduct entity)
		{
			this.SendPropertyChanging();
			entity.ItemGroup = this;
		}
		
		private void detach_AnimationProducts(AnimationProduct entity)
		{
			this.SendPropertyChanging();
			entity.ItemGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemType")]
	public partial class ItemType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private System.Guid _IDDivision;
		
		private bool _IncludeInSAPOrders;
		
		private bool _RRPAvailable;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private bool _Deleted;
		
		private EntitySet<CustomerCapacity> _CustomerCapacities;
		
		private EntitySet<CustomerGroupItemType> _CustomerGroupItemTypes;
		
		private EntitySet<AnimationProduct> _AnimationProducts;
		
		private EntityRef<Division> _Division;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDDivisionChanging(System.Guid value);
    partial void OnIDDivisionChanged();
    partial void OnIncludeInSAPOrdersChanging(bool value);
    partial void OnIncludeInSAPOrdersChanged();
    partial void OnRRPAvailableChanging(bool value);
    partial void OnRRPAvailableChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public ItemType()
		{
			this._CustomerCapacities = new EntitySet<CustomerCapacity>(new Action<CustomerCapacity>(this.attach_CustomerCapacities), new Action<CustomerCapacity>(this.detach_CustomerCapacities));
			this._CustomerGroupItemTypes = new EntitySet<CustomerGroupItemType>(new Action<CustomerGroupItemType>(this.attach_CustomerGroupItemTypes), new Action<CustomerGroupItemType>(this.detach_CustomerGroupItemTypes));
			this._AnimationProducts = new EntitySet<AnimationProduct>(new Action<AnimationProduct>(this.attach_AnimationProducts), new Action<AnimationProduct>(this.detach_AnimationProducts));
			this._Division = default(EntityRef<Division>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDivision", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDDivision
		{
			get
			{
				return this._IDDivision;
			}
			set
			{
				if ((this._IDDivision != value))
				{
					if (this._Division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDivisionChanging(value);
					this.SendPropertyChanging();
					this._IDDivision = value;
					this.SendPropertyChanged("IDDivision");
					this.OnIDDivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncludeInSAPOrders", DbType="Bit NOT NULL")]
		public bool IncludeInSAPOrders
		{
			get
			{
				return this._IncludeInSAPOrders;
			}
			set
			{
				if ((this._IncludeInSAPOrders != value))
				{
					this.OnIncludeInSAPOrdersChanging(value);
					this.SendPropertyChanging();
					this._IncludeInSAPOrders = value;
					this.SendPropertyChanged("IncludeInSAPOrders");
					this.OnIncludeInSAPOrdersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RRPAvailable", DbType="Bit NOT NULL")]
		public bool RRPAvailable
		{
			get
			{
				return this._RRPAvailable;
			}
			set
			{
				if ((this._RRPAvailable != value))
				{
					this.OnRRPAvailableChanging(value);
					this.SendPropertyChanging();
					this._RRPAvailable = value;
					this.SendPropertyChanged("RRPAvailable");
					this.OnRRPAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemType_CustomerCapacity", Storage="_CustomerCapacities", ThisKey="ID", OtherKey="IDItemType")]
		public EntitySet<CustomerCapacity> CustomerCapacities
		{
			get
			{
				return this._CustomerCapacities;
			}
			set
			{
				this._CustomerCapacities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemType_CustomerGroupItemType", Storage="_CustomerGroupItemTypes", ThisKey="ID", OtherKey="IDItemType")]
		public EntitySet<CustomerGroupItemType> CustomerGroupItemTypes
		{
			get
			{
				return this._CustomerGroupItemTypes;
			}
			set
			{
				this._CustomerGroupItemTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemType_AnimationProduct", Storage="_AnimationProducts", ThisKey="ID", OtherKey="IDItemType")]
		public EntitySet<AnimationProduct> AnimationProducts
		{
			get
			{
				return this._AnimationProducts;
			}
			set
			{
				this._AnimationProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_ItemType", Storage="_Division", ThisKey="IDDivision", OtherKey="ID", IsForeignKey=true)]
		public Division Division
		{
			get
			{
				return this._Division.Entity;
			}
			set
			{
				Division previousValue = this._Division.Entity;
				if (((previousValue != value) 
							|| (this._Division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division.Entity = null;
						previousValue.ItemTypes.Remove(this);
					}
					this._Division.Entity = value;
					if ((value != null))
					{
						value.ItemTypes.Add(this);
						this._IDDivision = value.ID;
					}
					else
					{
						this._IDDivision = default(System.Guid);
					}
					this.SendPropertyChanged("Division");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerCapacities(CustomerCapacity entity)
		{
			this.SendPropertyChanging();
			entity.ItemType = this;
		}
		
		private void detach_CustomerCapacities(CustomerCapacity entity)
		{
			this.SendPropertyChanging();
			entity.ItemType = null;
		}
		
		private void attach_CustomerGroupItemTypes(CustomerGroupItemType entity)
		{
			this.SendPropertyChanging();
			entity.ItemType = this;
		}
		
		private void detach_CustomerGroupItemTypes(CustomerGroupItemType entity)
		{
			this.SendPropertyChanging();
			entity.ItemType = null;
		}
		
		private void attach_AnimationProducts(AnimationProduct entity)
		{
			this.SendPropertyChanging();
			entity.ItemType = this;
		}
		
		private void detach_AnimationProducts(AnimationProduct entity)
		{
			this.SendPropertyChanging();
			entity.ItemType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Multiple")]
	public partial class Multiple : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _Value;
		
		private System.Guid _IDProduct;
		
		private bool _Deleted;
		
		private bool _Manual;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private EntitySet<AnimationProduct> _AnimationProducts;
		
		private EntitySet<AnimationProduct> _AnimationProducts1;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    partial void OnIDProductChanging(System.Guid value);
    partial void OnIDProductChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnManualChanging(bool value);
    partial void OnManualChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Multiple()
		{
			this._AnimationProducts = new EntitySet<AnimationProduct>(new Action<AnimationProduct>(this.attach_AnimationProducts), new Action<AnimationProduct>(this.detach_AnimationProducts));
			this._AnimationProducts1 = new EntitySet<AnimationProduct>(new Action<AnimationProduct>(this.attach_AnimationProducts1), new Action<AnimationProduct>(this.detach_AnimationProducts1));
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDProduct", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDProduct
		{
			get
			{
				return this._IDProduct;
			}
			set
			{
				if ((this._IDProduct != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDProductChanging(value);
					this.SendPropertyChanging();
					this._IDProduct = value;
					this.SendPropertyChanged("IDProduct");
					this.OnIDProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manual", DbType="Bit NOT NULL")]
		public bool Manual
		{
			get
			{
				return this._Manual;
			}
			set
			{
				if ((this._Manual != value))
				{
					this.OnManualChanging(value);
					this.SendPropertyChanging();
					this._Manual = value;
					this.SendPropertyChanged("Manual");
					this.OnManualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Multiple_AnimationProduct", Storage="_AnimationProducts", ThisKey="ID", OtherKey="IDMultipleNormal")]
		public EntitySet<AnimationProduct> AnimationProducts
		{
			get
			{
				return this._AnimationProducts;
			}
			set
			{
				this._AnimationProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Multiple_AnimationProduct1", Storage="_AnimationProducts1", ThisKey="ID", OtherKey="IDMultipleWarehouse")]
		public EntitySet<AnimationProduct> AnimationProducts1
		{
			get
			{
				return this._AnimationProducts1;
			}
			set
			{
				this._AnimationProducts1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Multiple", Storage="_Product", ThisKey="IDProduct", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Multiples.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Multiples.Add(this);
						this._IDProduct = value.ID;
					}
					else
					{
						this._IDProduct = default(System.Guid);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AnimationProducts(AnimationProduct entity)
		{
			this.SendPropertyChanging();
			entity.Multiple = this;
		}
		
		private void detach_AnimationProducts(AnimationProduct entity)
		{
			this.SendPropertyChanging();
			entity.Multiple = null;
		}
		
		private void attach_AnimationProducts1(AnimationProduct entity)
		{
			this.SendPropertyChanging();
			entity.Multiple1 = this;
		}
		
		private void detach_AnimationProducts1(AnimationProduct entity)
		{
			this.SendPropertyChanging();
			entity.Multiple1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderType")]
	public partial class OrderType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Code;
		
		private string _Name;
		
		private System.Guid _IDDivision;
		
		private bool _Deleted;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private EntitySet<Animation> _Animations;
		
		private EntityRef<Division> _Division;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDDivisionChanging(System.Guid value);
    partial void OnIDDivisionChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public OrderType()
		{
			this._Animations = new EntitySet<Animation>(new Action<Animation>(this.attach_Animations), new Action<Animation>(this.detach_Animations));
			this._Division = default(EntityRef<Division>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDivision", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDDivision
		{
			get
			{
				return this._IDDivision;
			}
			set
			{
				if ((this._IDDivision != value))
				{
					if (this._Division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDivisionChanging(value);
					this.SendPropertyChanging();
					this._IDDivision = value;
					this.SendPropertyChanged("IDDivision");
					this.OnIDDivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderType_Animation", Storage="_Animations", ThisKey="ID", OtherKey="IDOrderType_Order")]
		public EntitySet<Animation> Animations
		{
			get
			{
				return this._Animations;
			}
			set
			{
				this._Animations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_OrderType", Storage="_Division", ThisKey="IDDivision", OtherKey="ID", IsForeignKey=true)]
		public Division Division
		{
			get
			{
				return this._Division.Entity;
			}
			set
			{
				Division previousValue = this._Division.Entity;
				if (((previousValue != value) 
							|| (this._Division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division.Entity = null;
						previousValue.OrderTypes.Remove(this);
					}
					this._Division.Entity = value;
					if ((value != null))
					{
						value.OrderTypes.Add(this);
						this._IDDivision = value.ID;
					}
					else
					{
						this._IDDivision = default(System.Guid);
					}
					this.SendPropertyChanged("Division");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animations(Animation entity)
		{
			this.SendPropertyChanging();
			entity.OrderType = this;
		}
		
		private void detach_Animations(Animation entity)
		{
			this.SendPropertyChanging();
			entity.OrderType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Priority")]
	public partial class Priority : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private System.Guid _IDDivision;
		
		private bool _Deleted;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private EntitySet<CustomerCapacity> _CustomerCapacities;
		
		private EntitySet<Animation> _Animations;
		
		private EntityRef<Division> _Division;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDDivisionChanging(System.Guid value);
    partial void OnIDDivisionChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Priority()
		{
			this._CustomerCapacities = new EntitySet<CustomerCapacity>(new Action<CustomerCapacity>(this.attach_CustomerCapacities), new Action<CustomerCapacity>(this.detach_CustomerCapacities));
			this._Animations = new EntitySet<Animation>(new Action<Animation>(this.attach_Animations), new Action<Animation>(this.detach_Animations));
			this._Division = default(EntityRef<Division>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDivision", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDDivision
		{
			get
			{
				return this._IDDivision;
			}
			set
			{
				if ((this._IDDivision != value))
				{
					if (this._Division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDivisionChanging(value);
					this.SendPropertyChanging();
					this._IDDivision = value;
					this.SendPropertyChanged("IDDivision");
					this.OnIDDivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Priority_CustomerCapacity", Storage="_CustomerCapacities", ThisKey="ID", OtherKey="IDPriority")]
		public EntitySet<CustomerCapacity> CustomerCapacities
		{
			get
			{
				return this._CustomerCapacities;
			}
			set
			{
				this._CustomerCapacities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Priority_Animation", Storage="_Animations", ThisKey="ID", OtherKey="IDPriority")]
		public EntitySet<Animation> Animations
		{
			get
			{
				return this._Animations;
			}
			set
			{
				this._Animations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Priority", Storage="_Division", ThisKey="IDDivision", OtherKey="ID", IsForeignKey=true)]
		public Division Division
		{
			get
			{
				return this._Division.Entity;
			}
			set
			{
				Division previousValue = this._Division.Entity;
				if (((previousValue != value) 
							|| (this._Division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division.Entity = null;
						previousValue.Priorities.Remove(this);
					}
					this._Division.Entity = value;
					if ((value != null))
					{
						value.Priorities.Add(this);
						this._IDDivision = value.ID;
					}
					else
					{
						this._IDDivision = default(System.Guid);
					}
					this.SendPropertyChanged("Division");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerCapacities(CustomerCapacity entity)
		{
			this.SendPropertyChanging();
			entity.Priority = this;
		}
		
		private void detach_CustomerCapacities(CustomerCapacity entity)
		{
			this.SendPropertyChanging();
			entity.Priority = null;
		}
		
		private void attach_Animations(Animation entity)
		{
			this.SendPropertyChanging();
			entity.Priority = this;
		}
		
		private void detach_Animations(Animation entity)
		{
			this.SendPropertyChanging();
			entity.Priority = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductConfirmed")]
	public partial class ProductConfirmed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _IDProduct;
		
		private int _Year;
		
		private int _Month;
		
		private int _Reliquat;
		
		private int _Current;
		
		private int _Month1;
		
		private int _Month2;
		
		private int _Month3;
		
		private int _Month4;
		
		private int _Month5;
		
		private int _Month6;
		
		private int _Month7;
		
		private int _Month8;
		
		private int _Month9;
		
		private int _Month10;
		
		private int _Month11;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIDProductChanging(System.Guid value);
    partial void OnIDProductChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnMonthChanging(int value);
    partial void OnMonthChanged();
    partial void OnReliquatChanging(int value);
    partial void OnReliquatChanged();
    partial void OnCurrentChanging(int value);
    partial void OnCurrentChanged();
    partial void OnMonth1Changing(int value);
    partial void OnMonth1Changed();
    partial void OnMonth2Changing(int value);
    partial void OnMonth2Changed();
    partial void OnMonth3Changing(int value);
    partial void OnMonth3Changed();
    partial void OnMonth4Changing(int value);
    partial void OnMonth4Changed();
    partial void OnMonth5Changing(int value);
    partial void OnMonth5Changed();
    partial void OnMonth6Changing(int value);
    partial void OnMonth6Changed();
    partial void OnMonth7Changing(int value);
    partial void OnMonth7Changed();
    partial void OnMonth8Changing(int value);
    partial void OnMonth8Changed();
    partial void OnMonth9Changing(int value);
    partial void OnMonth9Changed();
    partial void OnMonth10Changing(int value);
    partial void OnMonth10Changed();
    partial void OnMonth11Changing(int value);
    partial void OnMonth11Changed();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public ProductConfirmed()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDProduct", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDProduct
		{
			get
			{
				return this._IDProduct;
			}
			set
			{
				if ((this._IDProduct != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDProductChanging(value);
					this.SendPropertyChanging();
					this._IDProduct = value;
					this.SendPropertyChanged("IDProduct");
					this.OnIDProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="Int NOT NULL")]
		public int Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reliquat", DbType="Int NOT NULL")]
		public int Reliquat
		{
			get
			{
				return this._Reliquat;
			}
			set
			{
				if ((this._Reliquat != value))
				{
					this.OnReliquatChanging(value);
					this.SendPropertyChanging();
					this._Reliquat = value;
					this.SendPropertyChanged("Reliquat");
					this.OnReliquatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Current]", Storage="_Current", DbType="Int NOT NULL")]
		public int Current
		{
			get
			{
				return this._Current;
			}
			set
			{
				if ((this._Current != value))
				{
					this.OnCurrentChanging(value);
					this.SendPropertyChanging();
					this._Current = value;
					this.SendPropertyChanged("Current");
					this.OnCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month1", DbType="Int NOT NULL")]
		public int Month1
		{
			get
			{
				return this._Month1;
			}
			set
			{
				if ((this._Month1 != value))
				{
					this.OnMonth1Changing(value);
					this.SendPropertyChanging();
					this._Month1 = value;
					this.SendPropertyChanged("Month1");
					this.OnMonth1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month2", DbType="Int NOT NULL")]
		public int Month2
		{
			get
			{
				return this._Month2;
			}
			set
			{
				if ((this._Month2 != value))
				{
					this.OnMonth2Changing(value);
					this.SendPropertyChanging();
					this._Month2 = value;
					this.SendPropertyChanged("Month2");
					this.OnMonth2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month3", DbType="Int NOT NULL")]
		public int Month3
		{
			get
			{
				return this._Month3;
			}
			set
			{
				if ((this._Month3 != value))
				{
					this.OnMonth3Changing(value);
					this.SendPropertyChanging();
					this._Month3 = value;
					this.SendPropertyChanged("Month3");
					this.OnMonth3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month4", DbType="Int NOT NULL")]
		public int Month4
		{
			get
			{
				return this._Month4;
			}
			set
			{
				if ((this._Month4 != value))
				{
					this.OnMonth4Changing(value);
					this.SendPropertyChanging();
					this._Month4 = value;
					this.SendPropertyChanged("Month4");
					this.OnMonth4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month5", DbType="Int NOT NULL")]
		public int Month5
		{
			get
			{
				return this._Month5;
			}
			set
			{
				if ((this._Month5 != value))
				{
					this.OnMonth5Changing(value);
					this.SendPropertyChanging();
					this._Month5 = value;
					this.SendPropertyChanged("Month5");
					this.OnMonth5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month6", DbType="Int NOT NULL")]
		public int Month6
		{
			get
			{
				return this._Month6;
			}
			set
			{
				if ((this._Month6 != value))
				{
					this.OnMonth6Changing(value);
					this.SendPropertyChanging();
					this._Month6 = value;
					this.SendPropertyChanged("Month6");
					this.OnMonth6Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month7", DbType="Int NOT NULL")]
		public int Month7
		{
			get
			{
				return this._Month7;
			}
			set
			{
				if ((this._Month7 != value))
				{
					this.OnMonth7Changing(value);
					this.SendPropertyChanging();
					this._Month7 = value;
					this.SendPropertyChanged("Month7");
					this.OnMonth7Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month8", DbType="Int NOT NULL")]
		public int Month8
		{
			get
			{
				return this._Month8;
			}
			set
			{
				if ((this._Month8 != value))
				{
					this.OnMonth8Changing(value);
					this.SendPropertyChanging();
					this._Month8 = value;
					this.SendPropertyChanged("Month8");
					this.OnMonth8Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month9", DbType="Int NOT NULL")]
		public int Month9
		{
			get
			{
				return this._Month9;
			}
			set
			{
				if ((this._Month9 != value))
				{
					this.OnMonth9Changing(value);
					this.SendPropertyChanging();
					this._Month9 = value;
					this.SendPropertyChanged("Month9");
					this.OnMonth9Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month10", DbType="Int NOT NULL")]
		public int Month10
		{
			get
			{
				return this._Month10;
			}
			set
			{
				if ((this._Month10 != value))
				{
					this.OnMonth10Changing(value);
					this.SendPropertyChanging();
					this._Month10 = value;
					this.SendPropertyChanged("Month10");
					this.OnMonth10Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month11", DbType="Int NOT NULL")]
		public int Month11
		{
			get
			{
				return this._Month11;
			}
			set
			{
				if ((this._Month11 != value))
				{
					this.OnMonth11Changing(value);
					this.SendPropertyChanging();
					this._Month11 = value;
					this.SendPropertyChanged("Month11");
					this.OnMonth11Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductConfirmed", Storage="_Product", ThisKey="IDProduct", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductConfirmeds.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductConfirmeds.Add(this);
						this._IDProduct = value.ID;
					}
					else
					{
						this._IDProduct = default(System.Guid);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductReceived")]
	public partial class ProductReceived : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _IDProduct;
		
		private int _Year;
		
		private int _Month;
		
		private int _Quantity;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIDProductChanging(System.Guid value);
    partial void OnIDProductChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnMonthChanging(int value);
    partial void OnMonthChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public ProductReceived()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDProduct", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDProduct
		{
			get
			{
				return this._IDProduct;
			}
			set
			{
				if ((this._IDProduct != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDProductChanging(value);
					this.SendPropertyChanging();
					this._IDProduct = value;
					this.SendPropertyChanged("IDProduct");
					this.OnIDProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="Int NOT NULL")]
		public int Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductReceived", Storage="_Product", ThisKey="IDProduct", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductReceiveds.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductReceiveds.Add(this);
						this._IDProduct = value.ID;
					}
					else
					{
						this._IDProduct = default(System.Guid);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RetailerType")]
	public partial class RetailerType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private bool _Default;
		
		private System.Guid _IDDivision;
		
		private bool _Deleted;
		
		private string _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntitySet<AnimationCustomerGroup> _AnimationCustomerGroups;
		
		private EntityRef<Division> _Division;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDefaultChanging(bool value);
    partial void OnDefaultChanged();
    partial void OnIDDivisionChanging(System.Guid value);
    partial void OnIDDivisionChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public RetailerType()
		{
			this._AnimationCustomerGroups = new EntitySet<AnimationCustomerGroup>(new Action<AnimationCustomerGroup>(this.attach_AnimationCustomerGroups), new Action<AnimationCustomerGroup>(this.detach_AnimationCustomerGroups));
			this._Division = default(EntityRef<Division>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Default]", Storage="_Default", DbType="Bit NOT NULL")]
		public bool Default
		{
			get
			{
				return this._Default;
			}
			set
			{
				if ((this._Default != value))
				{
					this.OnDefaultChanging(value);
					this.SendPropertyChanging();
					this._Default = value;
					this.SendPropertyChanged("Default");
					this.OnDefaultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDivision", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDDivision
		{
			get
			{
				return this._IDDivision;
			}
			set
			{
				if ((this._IDDivision != value))
				{
					if (this._Division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDivisionChanging(value);
					this.SendPropertyChanging();
					this._IDDivision = value;
					this.SendPropertyChanged("IDDivision");
					this.OnIDDivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RetailerType_AnimationCustomerGroup", Storage="_AnimationCustomerGroups", ThisKey="ID", OtherKey="IDRetailerType")]
		public EntitySet<AnimationCustomerGroup> AnimationCustomerGroups
		{
			get
			{
				return this._AnimationCustomerGroups;
			}
			set
			{
				this._AnimationCustomerGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_RetailerType", Storage="_Division", ThisKey="IDDivision", OtherKey="ID", IsForeignKey=true)]
		public Division Division
		{
			get
			{
				return this._Division.Entity;
			}
			set
			{
				Division previousValue = this._Division.Entity;
				if (((previousValue != value) 
							|| (this._Division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division.Entity = null;
						previousValue.RetailerTypes.Remove(this);
					}
					this._Division.Entity = value;
					if ((value != null))
					{
						value.RetailerTypes.Add(this);
						this._IDDivision = value.ID;
					}
					else
					{
						this._IDDivision = default(System.Guid);
					}
					this.SendPropertyChanged("Division");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AnimationCustomerGroups(AnimationCustomerGroup entity)
		{
			this.SendPropertyChanging();
			entity.RetailerType = this;
		}
		
		private void detach_AnimationCustomerGroups(AnimationCustomerGroup entity)
		{
			this.SendPropertyChanging();
			entity.RetailerType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntitySet<UserRole> _UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Role()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_UserRoles", ThisKey="ID", OtherKey="IDRole")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sale")]
	public partial class Sale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _IDCustomer;
		
		private System.Guid _IDBrandAxe;
		
		private System.Nullable<decimal> _EPOSValue;
		
		private System.Nullable<decimal> _CaCatValue;
		
		private System.Nullable<decimal> _ManualValue;
		
		private System.DateTime _Date;
		
		private System.Nullable<System.Guid> _IDCustomer_Benchmark;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private EntityRef<BrandAxe> _BrandAxe;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Customer> _Customer1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIDCustomerChanging(System.Guid value);
    partial void OnIDCustomerChanged();
    partial void OnIDBrandAxeChanging(System.Guid value);
    partial void OnIDBrandAxeChanged();
    partial void OnEPOSValueChanging(System.Nullable<decimal> value);
    partial void OnEPOSValueChanged();
    partial void OnCaCatValueChanging(System.Nullable<decimal> value);
    partial void OnCaCatValueChanged();
    partial void OnManualValueChanging(System.Nullable<decimal> value);
    partial void OnManualValueChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnIDCustomer_BenchmarkChanging(System.Nullable<System.Guid> value);
    partial void OnIDCustomer_BenchmarkChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Sale()
		{
			this._BrandAxe = default(EntityRef<BrandAxe>);
			this._Customer = default(EntityRef<Customer>);
			this._Customer1 = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBrandAxe", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDBrandAxe
		{
			get
			{
				return this._IDBrandAxe;
			}
			set
			{
				if ((this._IDBrandAxe != value))
				{
					if (this._BrandAxe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDBrandAxeChanging(value);
					this.SendPropertyChanging();
					this._IDBrandAxe = value;
					this.SendPropertyChanged("IDBrandAxe");
					this.OnIDBrandAxeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EPOSValue", DbType="Money")]
		public System.Nullable<decimal> EPOSValue
		{
			get
			{
				return this._EPOSValue;
			}
			set
			{
				if ((this._EPOSValue != value))
				{
					this.OnEPOSValueChanging(value);
					this.SendPropertyChanging();
					this._EPOSValue = value;
					this.SendPropertyChanged("EPOSValue");
					this.OnEPOSValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaCatValue", DbType="Money")]
		public System.Nullable<decimal> CaCatValue
		{
			get
			{
				return this._CaCatValue;
			}
			set
			{
				if ((this._CaCatValue != value))
				{
					this.OnCaCatValueChanging(value);
					this.SendPropertyChanging();
					this._CaCatValue = value;
					this.SendPropertyChanged("CaCatValue");
					this.OnCaCatValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManualValue", DbType="Money")]
		public System.Nullable<decimal> ManualValue
		{
			get
			{
				return this._ManualValue;
			}
			set
			{
				if ((this._ManualValue != value))
				{
					this.OnManualValueChanging(value);
					this.SendPropertyChanging();
					this._ManualValue = value;
					this.SendPropertyChanged("ManualValue");
					this.OnManualValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer_Benchmark", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDCustomer_Benchmark
		{
			get
			{
				return this._IDCustomer_Benchmark;
			}
			set
			{
				if ((this._IDCustomer_Benchmark != value))
				{
					if (this._Customer1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomer_BenchmarkChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer_Benchmark = value;
					this.SendPropertyChanged("IDCustomer_Benchmark");
					this.OnIDCustomer_BenchmarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrandAxe_Sale", Storage="_BrandAxe", ThisKey="IDBrandAxe", OtherKey="ID", IsForeignKey=true)]
		public BrandAxe BrandAxe
		{
			get
			{
				return this._BrandAxe.Entity;
			}
			set
			{
				BrandAxe previousValue = this._BrandAxe.Entity;
				if (((previousValue != value) 
							|| (this._BrandAxe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BrandAxe.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._BrandAxe.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._IDBrandAxe = value.ID;
					}
					else
					{
						this._IDBrandAxe = default(System.Guid);
					}
					this.SendPropertyChanged("BrandAxe");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Sale", Storage="_Customer", ThisKey="IDCustomer", OtherKey="ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._IDCustomer = value.ID;
					}
					else
					{
						this._IDCustomer = default(System.Guid);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Sale1", Storage="_Customer1", ThisKey="IDCustomer_Benchmark", OtherKey="ID", IsForeignKey=true)]
		public Customer Customer1
		{
			get
			{
				return this._Customer1.Entity;
			}
			set
			{
				Customer previousValue = this._Customer1.Entity;
				if (((previousValue != value) 
							|| (this._Customer1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer1.Entity = null;
						previousValue.Sales1.Remove(this);
					}
					this._Customer1.Entity = value;
					if ((value != null))
					{
						value.Sales1.Add(this);
						this._IDCustomer_Benchmark = value.ID;
					}
					else
					{
						this._IDCustomer_Benchmark = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Customer1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalesDrive")]
	public partial class SalesDrive : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _Year;
		
		private string _Name;
		
		private System.Guid _IDDivision;
		
		private bool _Deleted;
		
		private string _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntitySet<Animation> _Animations;
		
		private EntityRef<Division> _Division;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDDivisionChanging(System.Guid value);
    partial void OnIDDivisionChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public SalesDrive()
		{
			this._Animations = new EntitySet<Animation>(new Action<Animation>(this.attach_Animations), new Action<Animation>(this.detach_Animations));
			this._Division = default(EntityRef<Division>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDivision", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDDivision
		{
			get
			{
				return this._IDDivision;
			}
			set
			{
				if ((this._IDDivision != value))
				{
					if (this._Division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDivisionChanging(value);
					this.SendPropertyChanging();
					this._IDDivision = value;
					this.SendPropertyChanged("IDDivision");
					this.OnIDDivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesDrive_Animation", Storage="_Animations", ThisKey="ID", OtherKey="IDSalesDrive")]
		public EntitySet<Animation> Animations
		{
			get
			{
				return this._Animations;
			}
			set
			{
				this._Animations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_SalesDrive", Storage="_Division", ThisKey="IDDivision", OtherKey="ID", IsForeignKey=true)]
		public Division Division
		{
			get
			{
				return this._Division.Entity;
			}
			set
			{
				Division previousValue = this._Division.Entity;
				if (((previousValue != value) 
							|| (this._Division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division.Entity = null;
						previousValue.SalesDrives.Remove(this);
					}
					this._Division.Entity = value;
					if ((value != null))
					{
						value.SalesDrives.Add(this);
						this._IDDivision = value.ID;
					}
					else
					{
						this._IDDivision = default(System.Guid);
					}
					this.SendPropertyChanged("Division");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animations(Animation entity)
		{
			this.SendPropertyChanging();
			entity.SalesDrive = this;
		}
		
		private void detach_Animations(Animation entity)
		{
			this.SendPropertyChanging();
			entity.SalesDrive = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalesOrganization")]
	public partial class SalesOrganization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _Code;
		
		private string _CountryCode;
		
		private bool _Deleted;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private EntitySet<SalesArea> _SalesAreas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public SalesOrganization()
		{
			this._SalesAreas = new EntitySet<SalesArea>(new Action<SalesArea>(this.attach_SalesAreas), new Action<SalesArea>(this.detach_SalesAreas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryCode", DbType="NVarChar(3)")]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesOrganization_SalesArea", Storage="_SalesAreas", ThisKey="ID", OtherKey="IDSalesOrganization")]
		public EntitySet<SalesArea> SalesAreas
		{
			get
			{
				return this._SalesAreas;
			}
			set
			{
				this._SalesAreas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SalesAreas(SalesArea entity)
		{
			this.SendPropertyChanging();
			entity.SalesOrganization = this;
		}
		
		private void detach_SalesAreas(SalesArea entity)
		{
			this.SendPropertyChanging();
			entity.SalesOrganization = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Signature")]
	public partial class Signature : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _IDDivision;
		
		private string _Name;
		
		private string _Code;
		
		private bool _Deleted;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private bool _Manual;
		
		private EntitySet<BrandAxe> _BrandAxes;
		
		private EntitySet<AnimationProduct> _AnimationProducts;
		
		private EntityRef<Division> _Division;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIDDivisionChanging(System.Guid value);
    partial void OnIDDivisionChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnManualChanging(bool value);
    partial void OnManualChanged();
    #endregion
		
		public Signature()
		{
			this._BrandAxes = new EntitySet<BrandAxe>(new Action<BrandAxe>(this.attach_BrandAxes), new Action<BrandAxe>(this.detach_BrandAxes));
			this._AnimationProducts = new EntitySet<AnimationProduct>(new Action<AnimationProduct>(this.attach_AnimationProducts), new Action<AnimationProduct>(this.detach_AnimationProducts));
			this._Division = default(EntityRef<Division>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDivision", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDDivision
		{
			get
			{
				return this._IDDivision;
			}
			set
			{
				if ((this._IDDivision != value))
				{
					if (this._Division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDivisionChanging(value);
					this.SendPropertyChanging();
					this._IDDivision = value;
					this.SendPropertyChanged("IDDivision");
					this.OnIDDivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manual", DbType="Bit NOT NULL")]
		public bool Manual
		{
			get
			{
				return this._Manual;
			}
			set
			{
				if ((this._Manual != value))
				{
					this.OnManualChanging(value);
					this.SendPropertyChanging();
					this._Manual = value;
					this.SendPropertyChanged("Manual");
					this.OnManualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Signature_BrandAxe", Storage="_BrandAxes", ThisKey="ID", OtherKey="IDSignature")]
		public EntitySet<BrandAxe> BrandAxes
		{
			get
			{
				return this._BrandAxes;
			}
			set
			{
				this._BrandAxes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Signature_AnimationProduct", Storage="_AnimationProducts", ThisKey="ID", OtherKey="IDSignature")]
		public EntitySet<AnimationProduct> AnimationProducts
		{
			get
			{
				return this._AnimationProducts;
			}
			set
			{
				this._AnimationProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Signature", Storage="_Division", ThisKey="IDDivision", OtherKey="ID", IsForeignKey=true)]
		public Division Division
		{
			get
			{
				return this._Division.Entity;
			}
			set
			{
				Division previousValue = this._Division.Entity;
				if (((previousValue != value) 
							|| (this._Division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division.Entity = null;
						previousValue.Signatures.Remove(this);
					}
					this._Division.Entity = value;
					if ((value != null))
					{
						value.Signatures.Add(this);
						this._IDDivision = value.ID;
					}
					else
					{
						this._IDDivision = default(System.Guid);
					}
					this.SendPropertyChanged("Division");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BrandAxes(BrandAxe entity)
		{
			this.SendPropertyChanging();
			entity.Signature = this;
		}
		
		private void detach_BrandAxes(BrandAxe entity)
		{
			this.SendPropertyChanging();
			entity.Signature = null;
		}
		
		private void attach_AnimationProducts(AnimationProduct entity)
		{
			this.SendPropertyChanging();
			entity.Signature = this;
		}
		
		private void detach_AnimationProducts(AnimationProduct entity)
		{
			this.SendPropertyChanging();
			entity.Signature = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _LoginName;
		
		private string _Name;
		
		private string _EmailAddress;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private EntitySet<UserRole> _UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnLoginNameChanging(string value);
    partial void OnLoginNameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public User()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LoginName
		{
			get
			{
				return this._LoginName;
			}
			set
			{
				if ((this._LoginName != value))
				{
					this.OnLoginNameChanging(value);
					this.SendPropertyChanging();
					this._LoginName = value;
					this.SendPropertyChanged("LoginName");
					this.OnLoginNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_UserRoles", ThisKey="ID", OtherKey="IDUser")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRole")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _IDRole;
		
		private System.Guid _IDUser;
		
		private System.Guid _IDDivision;
		
		private string _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntityRef<Division> _Division;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIDRoleChanging(System.Guid value);
    partial void OnIDRoleChanged();
    partial void OnIDUserChanging(System.Guid value);
    partial void OnIDUserChanged();
    partial void OnIDDivisionChanging(System.Guid value);
    partial void OnIDDivisionChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public UserRole()
		{
			this._Division = default(EntityRef<Division>);
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRole", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDRole
		{
			get
			{
				return this._IDRole;
			}
			set
			{
				if ((this._IDRole != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDRoleChanging(value);
					this.SendPropertyChanging();
					this._IDRole = value;
					this.SendPropertyChanged("IDRole");
					this.OnIDRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUser", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDUser
		{
			get
			{
				return this._IDUser;
			}
			set
			{
				if ((this._IDUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDUserChanging(value);
					this.SendPropertyChanging();
					this._IDUser = value;
					this.SendPropertyChanged("IDUser");
					this.OnIDUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDivision", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDDivision
		{
			get
			{
				return this._IDDivision;
			}
			set
			{
				if ((this._IDDivision != value))
				{
					if (this._Division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDivisionChanging(value);
					this.SendPropertyChanging();
					this._IDDivision = value;
					this.SendPropertyChanged("IDDivision");
					this.OnIDDivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_UserRole", Storage="_Division", ThisKey="IDDivision", OtherKey="ID", IsForeignKey=true)]
		public Division Division
		{
			get
			{
				return this._Division.Entity;
			}
			set
			{
				Division previousValue = this._Division.Entity;
				if (((previousValue != value) 
							|| (this._Division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._Division.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._IDDivision = value.ID;
					}
					else
					{
						this._IDDivision = default(System.Guid);
					}
					this.SendPropertyChanged("Division");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_Role", ThisKey="IDRole", OtherKey="ID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._IDRole = value.ID;
					}
					else
					{
						this._IDRole = default(System.Guid);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_User", ThisKey="IDUser", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._IDUser = value.ID;
					}
					else
					{
						this._IDUser = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalesArea")]
	public partial class SalesArea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _IDDistributionChannel;
		
		private System.Guid _IDSalesOrganization;
		
		private System.Guid _IDDivision;
		
		private string _Name;
		
		private string _Code;
		
		private bool _Deleted;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private System.Nullable<double> _RetailMultiplier;
		
		private System.Nullable<double> _RRPToListPriceRate;
		
		private EntitySet<CustomerGroup> _CustomerGroups;
		
		private EntitySet<AnimationProductDetail> _AnimationProductDetails;
		
		private EntitySet<Customer> _Customers;
		
		private EntitySet<Customer> _Customers1;
		
		private EntityRef<DistributionChannel> _DistributionChannel;
		
		private EntityRef<Division> _Division;
		
		private EntityRef<SalesOrganization> _SalesOrganization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIDDistributionChannelChanging(System.Guid value);
    partial void OnIDDistributionChannelChanged();
    partial void OnIDSalesOrganizationChanging(System.Guid value);
    partial void OnIDSalesOrganizationChanged();
    partial void OnIDDivisionChanging(System.Guid value);
    partial void OnIDDivisionChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnRetailMultiplierChanging(System.Nullable<double> value);
    partial void OnRetailMultiplierChanged();
    partial void OnRRPToListPriceRateChanging(System.Nullable<double> value);
    partial void OnRRPToListPriceRateChanged();
    #endregion
		
		public SalesArea()
		{
			this._CustomerGroups = new EntitySet<CustomerGroup>(new Action<CustomerGroup>(this.attach_CustomerGroups), new Action<CustomerGroup>(this.detach_CustomerGroups));
			this._AnimationProductDetails = new EntitySet<AnimationProductDetail>(new Action<AnimationProductDetail>(this.attach_AnimationProductDetails), new Action<AnimationProductDetail>(this.detach_AnimationProductDetails));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._Customers1 = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers1), new Action<Customer>(this.detach_Customers1));
			this._DistributionChannel = default(EntityRef<DistributionChannel>);
			this._Division = default(EntityRef<Division>);
			this._SalesOrganization = default(EntityRef<SalesOrganization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDistributionChannel", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDDistributionChannel
		{
			get
			{
				return this._IDDistributionChannel;
			}
			set
			{
				if ((this._IDDistributionChannel != value))
				{
					if (this._DistributionChannel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDistributionChannelChanging(value);
					this.SendPropertyChanging();
					this._IDDistributionChannel = value;
					this.SendPropertyChanged("IDDistributionChannel");
					this.OnIDDistributionChannelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSalesOrganization", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDSalesOrganization
		{
			get
			{
				return this._IDSalesOrganization;
			}
			set
			{
				if ((this._IDSalesOrganization != value))
				{
					if (this._SalesOrganization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSalesOrganizationChanging(value);
					this.SendPropertyChanging();
					this._IDSalesOrganization = value;
					this.SendPropertyChanged("IDSalesOrganization");
					this.OnIDSalesOrganizationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDivision", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDDivision
		{
			get
			{
				return this._IDDivision;
			}
			set
			{
				if ((this._IDDivision != value))
				{
					if (this._Division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDivisionChanging(value);
					this.SendPropertyChanging();
					this._IDDivision = value;
					this.SendPropertyChanged("IDDivision");
					this.OnIDDivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RetailMultiplier", DbType="Float")]
		public System.Nullable<double> RetailMultiplier
		{
			get
			{
				return this._RetailMultiplier;
			}
			set
			{
				if ((this._RetailMultiplier != value))
				{
					this.OnRetailMultiplierChanging(value);
					this.SendPropertyChanging();
					this._RetailMultiplier = value;
					this.SendPropertyChanged("RetailMultiplier");
					this.OnRetailMultiplierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RRPToListPriceRate", DbType="Float")]
		public System.Nullable<double> RRPToListPriceRate
		{
			get
			{
				return this._RRPToListPriceRate;
			}
			set
			{
				if ((this._RRPToListPriceRate != value))
				{
					this.OnRRPToListPriceRateChanging(value);
					this.SendPropertyChanging();
					this._RRPToListPriceRate = value;
					this.SendPropertyChanged("RRPToListPriceRate");
					this.OnRRPToListPriceRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesArea_CustomerGroup", Storage="_CustomerGroups", ThisKey="ID", OtherKey="IDSalesArea")]
		public EntitySet<CustomerGroup> CustomerGroups
		{
			get
			{
				return this._CustomerGroups;
			}
			set
			{
				this._CustomerGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesArea_AnimationProductDetail", Storage="_AnimationProductDetails", ThisKey="ID", OtherKey="IDSalesArea")]
		public EntitySet<AnimationProductDetail> AnimationProductDetails
		{
			get
			{
				return this._AnimationProductDetails;
			}
			set
			{
				this._AnimationProductDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesArea_Customer", Storage="_Customers", ThisKey="ID", OtherKey="IDSalesArea_AllocationSalesArea")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesArea_Customer1", Storage="_Customers1", ThisKey="ID", OtherKey="IDSalesArea_Original")]
		public EntitySet<Customer> Customers1
		{
			get
			{
				return this._Customers1;
			}
			set
			{
				this._Customers1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DistributionChannel_SalesArea", Storage="_DistributionChannel", ThisKey="IDDistributionChannel", OtherKey="ID", IsForeignKey=true)]
		public DistributionChannel DistributionChannel
		{
			get
			{
				return this._DistributionChannel.Entity;
			}
			set
			{
				DistributionChannel previousValue = this._DistributionChannel.Entity;
				if (((previousValue != value) 
							|| (this._DistributionChannel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DistributionChannel.Entity = null;
						previousValue.SalesAreas.Remove(this);
					}
					this._DistributionChannel.Entity = value;
					if ((value != null))
					{
						value.SalesAreas.Add(this);
						this._IDDistributionChannel = value.ID;
					}
					else
					{
						this._IDDistributionChannel = default(System.Guid);
					}
					this.SendPropertyChanged("DistributionChannel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_SalesArea", Storage="_Division", ThisKey="IDDivision", OtherKey="ID", IsForeignKey=true)]
		public Division Division
		{
			get
			{
				return this._Division.Entity;
			}
			set
			{
				Division previousValue = this._Division.Entity;
				if (((previousValue != value) 
							|| (this._Division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division.Entity = null;
						previousValue.SalesAreas.Remove(this);
					}
					this._Division.Entity = value;
					if ((value != null))
					{
						value.SalesAreas.Add(this);
						this._IDDivision = value.ID;
					}
					else
					{
						this._IDDivision = default(System.Guid);
					}
					this.SendPropertyChanged("Division");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesOrganization_SalesArea", Storage="_SalesOrganization", ThisKey="IDSalesOrganization", OtherKey="ID", IsForeignKey=true)]
		public SalesOrganization SalesOrganization
		{
			get
			{
				return this._SalesOrganization.Entity;
			}
			set
			{
				SalesOrganization previousValue = this._SalesOrganization.Entity;
				if (((previousValue != value) 
							|| (this._SalesOrganization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SalesOrganization.Entity = null;
						previousValue.SalesAreas.Remove(this);
					}
					this._SalesOrganization.Entity = value;
					if ((value != null))
					{
						value.SalesAreas.Add(this);
						this._IDSalesOrganization = value.ID;
					}
					else
					{
						this._IDSalesOrganization = default(System.Guid);
					}
					this.SendPropertyChanged("SalesOrganization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerGroups(CustomerGroup entity)
		{
			this.SendPropertyChanging();
			entity.SalesArea = this;
		}
		
		private void detach_CustomerGroups(CustomerGroup entity)
		{
			this.SendPropertyChanging();
			entity.SalesArea = null;
		}
		
		private void attach_AnimationProductDetails(AnimationProductDetail entity)
		{
			this.SendPropertyChanging();
			entity.SalesArea = this;
		}
		
		private void detach_AnimationProductDetails(AnimationProductDetail entity)
		{
			this.SendPropertyChanging();
			entity.SalesArea = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.SalesArea = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.SalesArea = null;
		}
		
		private void attach_Customers1(Customer entity)
		{
			this.SendPropertyChanging();
			entity.SalesArea1 = this;
		}
		
		private void detach_Customers1(Customer entity)
		{
			this.SendPropertyChanging();
			entity.SalesArea1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerGroup")]
	public partial class CustomerGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _Code;
		
		private string _CustomisedName;
		
		private string _CustomisedCode;
		
		private System.Guid _IDSalesArea;
		
		private bool _IncludeInSystem;
		
		private bool _ShowRBMInReporting;
		
		private bool _IncludeInSAPOrders;
		
		private bool _Manual;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private System.Nullable<int> _SortOrder;
		
		private System.Nullable<bool> _CountryCodeTemp;
		
		private EntitySet<CustomerGroupItemType> _CustomerGroupItemTypes;
		
		private EntitySet<CustomerGroupAllocation> _CustomerGroupAllocations;
		
		private EntitySet<Customer> _Customers;
		
		private EntitySet<AnimationCustomerGroup> _AnimationCustomerGroups;
		
		private EntityRef<SalesArea> _SalesArea;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnCustomisedNameChanging(string value);
    partial void OnCustomisedNameChanged();
    partial void OnCustomisedCodeChanging(string value);
    partial void OnCustomisedCodeChanged();
    partial void OnIDSalesAreaChanging(System.Guid value);
    partial void OnIDSalesAreaChanged();
    partial void OnIncludeInSystemChanging(bool value);
    partial void OnIncludeInSystemChanged();
    partial void OnShowRBMInReportingChanging(bool value);
    partial void OnShowRBMInReportingChanged();
    partial void OnIncludeInSAPOrdersChanging(bool value);
    partial void OnIncludeInSAPOrdersChanged();
    partial void OnManualChanging(bool value);
    partial void OnManualChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnSortOrderChanging(System.Nullable<int> value);
    partial void OnSortOrderChanged();
    partial void OnCountryCodeTempChanging(System.Nullable<bool> value);
    partial void OnCountryCodeTempChanged();
    #endregion
		
		public CustomerGroup()
		{
			this._CustomerGroupItemTypes = new EntitySet<CustomerGroupItemType>(new Action<CustomerGroupItemType>(this.attach_CustomerGroupItemTypes), new Action<CustomerGroupItemType>(this.detach_CustomerGroupItemTypes));
			this._CustomerGroupAllocations = new EntitySet<CustomerGroupAllocation>(new Action<CustomerGroupAllocation>(this.attach_CustomerGroupAllocations), new Action<CustomerGroupAllocation>(this.detach_CustomerGroupAllocations));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._AnimationCustomerGroups = new EntitySet<AnimationCustomerGroup>(new Action<AnimationCustomerGroup>(this.attach_AnimationCustomerGroups), new Action<AnimationCustomerGroup>(this.detach_AnimationCustomerGroups));
			this._SalesArea = default(EntityRef<SalesArea>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomisedName", DbType="NVarChar(100)")]
		public string CustomisedName
		{
			get
			{
				return this._CustomisedName;
			}
			set
			{
				if ((this._CustomisedName != value))
				{
					this.OnCustomisedNameChanging(value);
					this.SendPropertyChanging();
					this._CustomisedName = value;
					this.SendPropertyChanged("CustomisedName");
					this.OnCustomisedNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomisedCode", DbType="NVarChar(10)")]
		public string CustomisedCode
		{
			get
			{
				return this._CustomisedCode;
			}
			set
			{
				if ((this._CustomisedCode != value))
				{
					this.OnCustomisedCodeChanging(value);
					this.SendPropertyChanging();
					this._CustomisedCode = value;
					this.SendPropertyChanged("CustomisedCode");
					this.OnCustomisedCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSalesArea", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDSalesArea
		{
			get
			{
				return this._IDSalesArea;
			}
			set
			{
				if ((this._IDSalesArea != value))
				{
					if (this._SalesArea.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSalesAreaChanging(value);
					this.SendPropertyChanging();
					this._IDSalesArea = value;
					this.SendPropertyChanged("IDSalesArea");
					this.OnIDSalesAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncludeInSystem", DbType="Bit NOT NULL")]
		public bool IncludeInSystem
		{
			get
			{
				return this._IncludeInSystem;
			}
			set
			{
				if ((this._IncludeInSystem != value))
				{
					this.OnIncludeInSystemChanging(value);
					this.SendPropertyChanging();
					this._IncludeInSystem = value;
					this.SendPropertyChanged("IncludeInSystem");
					this.OnIncludeInSystemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowRBMInReporting", DbType="Bit NOT NULL")]
		public bool ShowRBMInReporting
		{
			get
			{
				return this._ShowRBMInReporting;
			}
			set
			{
				if ((this._ShowRBMInReporting != value))
				{
					this.OnShowRBMInReportingChanging(value);
					this.SendPropertyChanging();
					this._ShowRBMInReporting = value;
					this.SendPropertyChanged("ShowRBMInReporting");
					this.OnShowRBMInReportingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncludeInSAPOrders", DbType="Bit NOT NULL")]
		public bool IncludeInSAPOrders
		{
			get
			{
				return this._IncludeInSAPOrders;
			}
			set
			{
				if ((this._IncludeInSAPOrders != value))
				{
					this.OnIncludeInSAPOrdersChanging(value);
					this.SendPropertyChanging();
					this._IncludeInSAPOrders = value;
					this.SendPropertyChanged("IncludeInSAPOrders");
					this.OnIncludeInSAPOrdersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manual", DbType="Bit NOT NULL")]
		public bool Manual
		{
			get
			{
				return this._Manual;
			}
			set
			{
				if ((this._Manual != value))
				{
					this.OnManualChanging(value);
					this.SendPropertyChanging();
					this._Manual = value;
					this.SendPropertyChanged("Manual");
					this.OnManualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int")]
		public System.Nullable<int> SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryCodeTemp", DbType="Bit")]
		public System.Nullable<bool> CountryCodeTemp
		{
			get
			{
				return this._CountryCodeTemp;
			}
			set
			{
				if ((this._CountryCodeTemp != value))
				{
					this.OnCountryCodeTempChanging(value);
					this.SendPropertyChanging();
					this._CountryCodeTemp = value;
					this.SendPropertyChanged("CountryCodeTemp");
					this.OnCountryCodeTempChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerGroup_CustomerGroupItemType", Storage="_CustomerGroupItemTypes", ThisKey="ID", OtherKey="IDCustomerGroup")]
		public EntitySet<CustomerGroupItemType> CustomerGroupItemTypes
		{
			get
			{
				return this._CustomerGroupItemTypes;
			}
			set
			{
				this._CustomerGroupItemTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerGroup_CustomerGroupAllocation", Storage="_CustomerGroupAllocations", ThisKey="ID", OtherKey="IDCustomerGroup")]
		public EntitySet<CustomerGroupAllocation> CustomerGroupAllocations
		{
			get
			{
				return this._CustomerGroupAllocations;
			}
			set
			{
				this._CustomerGroupAllocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerGroup_Customer", Storage="_Customers", ThisKey="ID", OtherKey="IDCustomerGroup")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerGroup_AnimationCustomerGroup", Storage="_AnimationCustomerGroups", ThisKey="ID", OtherKey="IDCustomerGroup")]
		public EntitySet<AnimationCustomerGroup> AnimationCustomerGroups
		{
			get
			{
				return this._AnimationCustomerGroups;
			}
			set
			{
				this._AnimationCustomerGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesArea_CustomerGroup", Storage="_SalesArea", ThisKey="IDSalesArea", OtherKey="ID", IsForeignKey=true)]
		public SalesArea SalesArea
		{
			get
			{
				return this._SalesArea.Entity;
			}
			set
			{
				SalesArea previousValue = this._SalesArea.Entity;
				if (((previousValue != value) 
							|| (this._SalesArea.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SalesArea.Entity = null;
						previousValue.CustomerGroups.Remove(this);
					}
					this._SalesArea.Entity = value;
					if ((value != null))
					{
						value.CustomerGroups.Add(this);
						this._IDSalesArea = value.ID;
					}
					else
					{
						this._IDSalesArea = default(System.Guid);
					}
					this.SendPropertyChanged("SalesArea");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerGroupItemTypes(CustomerGroupItemType entity)
		{
			this.SendPropertyChanging();
			entity.CustomerGroup = this;
		}
		
		private void detach_CustomerGroupItemTypes(CustomerGroupItemType entity)
		{
			this.SendPropertyChanging();
			entity.CustomerGroup = null;
		}
		
		private void attach_CustomerGroupAllocations(CustomerGroupAllocation entity)
		{
			this.SendPropertyChanging();
			entity.CustomerGroup = this;
		}
		
		private void detach_CustomerGroupAllocations(CustomerGroupAllocation entity)
		{
			this.SendPropertyChanging();
			entity.CustomerGroup = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.CustomerGroup = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.CustomerGroup = null;
		}
		
		private void attach_AnimationCustomerGroups(AnimationCustomerGroup entity)
		{
			this.SendPropertyChanging();
			entity.CustomerGroup = this;
		}
		
		private void detach_AnimationCustomerGroups(AnimationCustomerGroup entity)
		{
			this.SendPropertyChanging();
			entity.CustomerGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnimationProductDetail")]
	public partial class AnimationProductDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _IDAnimationProduct;
		
		private System.Guid _IDSalesArea;
		
		private System.Nullable<decimal> _RRP;
		
		private int _BDCQuantity;
		
		private System.Nullable<int> _ForecastProcQuantity;
		
		private System.Nullable<int> _AllocationQuantity;
		
		private string _MarketingComments;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private EntitySet<CustomerGroupAllocation> _CustomerGroupAllocations;
		
		private EntitySet<CustomerAllocation> _CustomerAllocations;
		
		private EntityRef<SalesArea> _SalesArea;
		
		private EntityRef<AnimationProduct> _AnimationProduct;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIDAnimationProductChanging(System.Guid value);
    partial void OnIDAnimationProductChanged();
    partial void OnIDSalesAreaChanging(System.Guid value);
    partial void OnIDSalesAreaChanged();
    partial void OnRRPChanging(System.Nullable<decimal> value);
    partial void OnRRPChanged();
    partial void OnBDCQuantityChanging(int value);
    partial void OnBDCQuantityChanged();
    partial void OnForecastProcQuantityChanging(System.Nullable<int> value);
    partial void OnForecastProcQuantityChanged();
    partial void OnAllocationQuantityChanging(System.Nullable<int> value);
    partial void OnAllocationQuantityChanged();
    partial void OnMarketingCommentsChanging(string value);
    partial void OnMarketingCommentsChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public AnimationProductDetail()
		{
			this._CustomerGroupAllocations = new EntitySet<CustomerGroupAllocation>(new Action<CustomerGroupAllocation>(this.attach_CustomerGroupAllocations), new Action<CustomerGroupAllocation>(this.detach_CustomerGroupAllocations));
			this._CustomerAllocations = new EntitySet<CustomerAllocation>(new Action<CustomerAllocation>(this.attach_CustomerAllocations), new Action<CustomerAllocation>(this.detach_CustomerAllocations));
			this._SalesArea = default(EntityRef<SalesArea>);
			this._AnimationProduct = default(EntityRef<AnimationProduct>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAnimationProduct", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDAnimationProduct
		{
			get
			{
				return this._IDAnimationProduct;
			}
			set
			{
				if ((this._IDAnimationProduct != value))
				{
					if (this._AnimationProduct.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAnimationProductChanging(value);
					this.SendPropertyChanging();
					this._IDAnimationProduct = value;
					this.SendPropertyChanged("IDAnimationProduct");
					this.OnIDAnimationProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSalesArea", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDSalesArea
		{
			get
			{
				return this._IDSalesArea;
			}
			set
			{
				if ((this._IDSalesArea != value))
				{
					if (this._SalesArea.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSalesAreaChanging(value);
					this.SendPropertyChanging();
					this._IDSalesArea = value;
					this.SendPropertyChanged("IDSalesArea");
					this.OnIDSalesAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RRP", DbType="Money")]
		public System.Nullable<decimal> RRP
		{
			get
			{
				return this._RRP;
			}
			set
			{
				if ((this._RRP != value))
				{
					this.OnRRPChanging(value);
					this.SendPropertyChanging();
					this._RRP = value;
					this.SendPropertyChanged("RRP");
					this.OnRRPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BDCQuantity", DbType="Int NOT NULL")]
		public int BDCQuantity
		{
			get
			{
				return this._BDCQuantity;
			}
			set
			{
				if ((this._BDCQuantity != value))
				{
					this.OnBDCQuantityChanging(value);
					this.SendPropertyChanging();
					this._BDCQuantity = value;
					this.SendPropertyChanged("BDCQuantity");
					this.OnBDCQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForecastProcQuantity", DbType="Int")]
		public System.Nullable<int> ForecastProcQuantity
		{
			get
			{
				return this._ForecastProcQuantity;
			}
			set
			{
				if ((this._ForecastProcQuantity != value))
				{
					this.OnForecastProcQuantityChanging(value);
					this.SendPropertyChanging();
					this._ForecastProcQuantity = value;
					this.SendPropertyChanged("ForecastProcQuantity");
					this.OnForecastProcQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllocationQuantity", DbType="Int")]
		public System.Nullable<int> AllocationQuantity
		{
			get
			{
				return this._AllocationQuantity;
			}
			set
			{
				if ((this._AllocationQuantity != value))
				{
					this.OnAllocationQuantityChanging(value);
					this.SendPropertyChanging();
					this._AllocationQuantity = value;
					this.SendPropertyChanged("AllocationQuantity");
					this.OnAllocationQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarketingComments", DbType="NVarChar(2000)")]
		public string MarketingComments
		{
			get
			{
				return this._MarketingComments;
			}
			set
			{
				if ((this._MarketingComments != value))
				{
					this.OnMarketingCommentsChanging(value);
					this.SendPropertyChanging();
					this._MarketingComments = value;
					this.SendPropertyChanged("MarketingComments");
					this.OnMarketingCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnimationProductDetail_CustomerGroupAllocation", Storage="_CustomerGroupAllocations", ThisKey="ID", OtherKey="IDAnimationProductDetail")]
		public EntitySet<CustomerGroupAllocation> CustomerGroupAllocations
		{
			get
			{
				return this._CustomerGroupAllocations;
			}
			set
			{
				this._CustomerGroupAllocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnimationProductDetail_CustomerAllocation", Storage="_CustomerAllocations", ThisKey="ID", OtherKey="IDAnimationProductDetail")]
		public EntitySet<CustomerAllocation> CustomerAllocations
		{
			get
			{
				return this._CustomerAllocations;
			}
			set
			{
				this._CustomerAllocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesArea_AnimationProductDetail", Storage="_SalesArea", ThisKey="IDSalesArea", OtherKey="ID", IsForeignKey=true)]
		public SalesArea SalesArea
		{
			get
			{
				return this._SalesArea.Entity;
			}
			set
			{
				SalesArea previousValue = this._SalesArea.Entity;
				if (((previousValue != value) 
							|| (this._SalesArea.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SalesArea.Entity = null;
						previousValue.AnimationProductDetails.Remove(this);
					}
					this._SalesArea.Entity = value;
					if ((value != null))
					{
						value.AnimationProductDetails.Add(this);
						this._IDSalesArea = value.ID;
					}
					else
					{
						this._IDSalesArea = default(System.Guid);
					}
					this.SendPropertyChanged("SalesArea");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnimationProduct_AnimationProductDetail", Storage="_AnimationProduct", ThisKey="IDAnimationProduct", OtherKey="ID", IsForeignKey=true)]
		public AnimationProduct AnimationProduct
		{
			get
			{
				return this._AnimationProduct.Entity;
			}
			set
			{
				AnimationProduct previousValue = this._AnimationProduct.Entity;
				if (((previousValue != value) 
							|| (this._AnimationProduct.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AnimationProduct.Entity = null;
						previousValue.AnimationProductDetails.Remove(this);
					}
					this._AnimationProduct.Entity = value;
					if ((value != null))
					{
						value.AnimationProductDetails.Add(this);
						this._IDAnimationProduct = value.ID;
					}
					else
					{
						this._IDAnimationProduct = default(System.Guid);
					}
					this.SendPropertyChanged("AnimationProduct");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerGroupAllocations(CustomerGroupAllocation entity)
		{
			this.SendPropertyChanging();
			entity.AnimationProductDetail = this;
		}
		
		private void detach_CustomerGroupAllocations(CustomerGroupAllocation entity)
		{
			this.SendPropertyChanging();
			entity.AnimationProductDetail = null;
		}
		
		private void attach_CustomerAllocations(CustomerAllocation entity)
		{
			this.SendPropertyChanging();
			entity.AnimationProductDetail = this;
		}
		
		private void detach_CustomerAllocations(CustomerAllocation entity)
		{
			this.SendPropertyChanging();
			entity.AnimationProductDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerGroupAllocation")]
	public partial class CustomerGroupAllocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _IDCustomerGroup;
		
		private System.Guid _IDAnimationProductDetail;
		
		private System.Nullable<int> _ManualFixedAllocation;
		
		private System.Nullable<double> _RetailUplift;
		
		private System.Nullable<int> _SystemFixedAllocation;
		
		private System.Nullable<int> _CalculatedAllocation;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private EntitySet<CustomerAllocation> _CustomerAllocations;
		
		private EntityRef<AnimationProductDetail> _AnimationProductDetail;
		
		private EntityRef<CustomerGroup> _CustomerGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIDCustomerGroupChanging(System.Guid value);
    partial void OnIDCustomerGroupChanged();
    partial void OnIDAnimationProductDetailChanging(System.Guid value);
    partial void OnIDAnimationProductDetailChanged();
    partial void OnManualFixedAllocationChanging(System.Nullable<int> value);
    partial void OnManualFixedAllocationChanged();
    partial void OnRetailUpliftChanging(System.Nullable<double> value);
    partial void OnRetailUpliftChanged();
    partial void OnSystemFixedAllocationChanging(System.Nullable<int> value);
    partial void OnSystemFixedAllocationChanged();
    partial void OnCalculatedAllocationChanging(System.Nullable<int> value);
    partial void OnCalculatedAllocationChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public CustomerGroupAllocation()
		{
			this._CustomerAllocations = new EntitySet<CustomerAllocation>(new Action<CustomerAllocation>(this.attach_CustomerAllocations), new Action<CustomerAllocation>(this.detach_CustomerAllocations));
			this._AnimationProductDetail = default(EntityRef<AnimationProductDetail>);
			this._CustomerGroup = default(EntityRef<CustomerGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomerGroup", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDCustomerGroup
		{
			get
			{
				return this._IDCustomerGroup;
			}
			set
			{
				if ((this._IDCustomerGroup != value))
				{
					if (this._CustomerGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerGroupChanging(value);
					this.SendPropertyChanging();
					this._IDCustomerGroup = value;
					this.SendPropertyChanged("IDCustomerGroup");
					this.OnIDCustomerGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAnimationProductDetail", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDAnimationProductDetail
		{
			get
			{
				return this._IDAnimationProductDetail;
			}
			set
			{
				if ((this._IDAnimationProductDetail != value))
				{
					if (this._AnimationProductDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAnimationProductDetailChanging(value);
					this.SendPropertyChanging();
					this._IDAnimationProductDetail = value;
					this.SendPropertyChanged("IDAnimationProductDetail");
					this.OnIDAnimationProductDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManualFixedAllocation", DbType="Int")]
		public System.Nullable<int> ManualFixedAllocation
		{
			get
			{
				return this._ManualFixedAllocation;
			}
			set
			{
				if ((this._ManualFixedAllocation != value))
				{
					this.OnManualFixedAllocationChanging(value);
					this.SendPropertyChanging();
					this._ManualFixedAllocation = value;
					this.SendPropertyChanged("ManualFixedAllocation");
					this.OnManualFixedAllocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RetailUplift", DbType="Float")]
		public System.Nullable<double> RetailUplift
		{
			get
			{
				return this._RetailUplift;
			}
			set
			{
				if ((this._RetailUplift != value))
				{
					this.OnRetailUpliftChanging(value);
					this.SendPropertyChanging();
					this._RetailUplift = value;
					this.SendPropertyChanged("RetailUplift");
					this.OnRetailUpliftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemFixedAllocation", DbType="Int")]
		public System.Nullable<int> SystemFixedAllocation
		{
			get
			{
				return this._SystemFixedAllocation;
			}
			set
			{
				if ((this._SystemFixedAllocation != value))
				{
					this.OnSystemFixedAllocationChanging(value);
					this.SendPropertyChanging();
					this._SystemFixedAllocation = value;
					this.SendPropertyChanged("SystemFixedAllocation");
					this.OnSystemFixedAllocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalculatedAllocation", DbType="Int")]
		public System.Nullable<int> CalculatedAllocation
		{
			get
			{
				return this._CalculatedAllocation;
			}
			set
			{
				if ((this._CalculatedAllocation != value))
				{
					this.OnCalculatedAllocationChanging(value);
					this.SendPropertyChanging();
					this._CalculatedAllocation = value;
					this.SendPropertyChanged("CalculatedAllocation");
					this.OnCalculatedAllocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerGroupAllocation_CustomerAllocation", Storage="_CustomerAllocations", ThisKey="ID", OtherKey="IDCustomerGroupAllocation")]
		public EntitySet<CustomerAllocation> CustomerAllocations
		{
			get
			{
				return this._CustomerAllocations;
			}
			set
			{
				this._CustomerAllocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnimationProductDetail_CustomerGroupAllocation", Storage="_AnimationProductDetail", ThisKey="IDAnimationProductDetail", OtherKey="ID", IsForeignKey=true)]
		public AnimationProductDetail AnimationProductDetail
		{
			get
			{
				return this._AnimationProductDetail.Entity;
			}
			set
			{
				AnimationProductDetail previousValue = this._AnimationProductDetail.Entity;
				if (((previousValue != value) 
							|| (this._AnimationProductDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AnimationProductDetail.Entity = null;
						previousValue.CustomerGroupAllocations.Remove(this);
					}
					this._AnimationProductDetail.Entity = value;
					if ((value != null))
					{
						value.CustomerGroupAllocations.Add(this);
						this._IDAnimationProductDetail = value.ID;
					}
					else
					{
						this._IDAnimationProductDetail = default(System.Guid);
					}
					this.SendPropertyChanged("AnimationProductDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerGroup_CustomerGroupAllocation", Storage="_CustomerGroup", ThisKey="IDCustomerGroup", OtherKey="ID", IsForeignKey=true)]
		public CustomerGroup CustomerGroup
		{
			get
			{
				return this._CustomerGroup.Entity;
			}
			set
			{
				CustomerGroup previousValue = this._CustomerGroup.Entity;
				if (((previousValue != value) 
							|| (this._CustomerGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerGroup.Entity = null;
						previousValue.CustomerGroupAllocations.Remove(this);
					}
					this._CustomerGroup.Entity = value;
					if ((value != null))
					{
						value.CustomerGroupAllocations.Add(this);
						this._IDCustomerGroup = value.ID;
					}
					else
					{
						this._IDCustomerGroup = default(System.Guid);
					}
					this.SendPropertyChanged("CustomerGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerAllocations(CustomerAllocation entity)
		{
			this.SendPropertyChanging();
			entity.CustomerGroupAllocation = this;
		}
		
		private void detach_CustomerAllocations(CustomerAllocation entity)
		{
			this.SendPropertyChanging();
			entity.CustomerGroupAllocation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Version")]
	public partial class Version : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _IDAnimation;
		
		private string _AnimationStatus;
		
		private string _Name;
		
		private System.DateTime _DateCreated;
		
		private string _CreatedBy;
		
		private string _Comments;
		
		private string _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntityRef<Animation> _Animation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIDAnimationChanging(System.Guid value);
    partial void OnIDAnimationChanged();
    partial void OnAnimationStatusChanging(string value);
    partial void OnAnimationStatusChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Version()
		{
			this._Animation = default(EntityRef<Animation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAnimation", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDAnimation
		{
			get
			{
				return this._IDAnimation;
			}
			set
			{
				if ((this._IDAnimation != value))
				{
					if (this._Animation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAnimationChanging(value);
					this.SendPropertyChanging();
					this._IDAnimation = value;
					this.SendPropertyChanged("IDAnimation");
					this.OnIDAnimationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnimationStatus", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AnimationStatus
		{
			get
			{
				return this._AnimationStatus;
			}
			set
			{
				if ((this._AnimationStatus != value))
				{
					this.OnAnimationStatusChanging(value);
					this.SendPropertyChanging();
					this._AnimationStatus = value;
					this.SendPropertyChanged("AnimationStatus");
					this.OnAnimationStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NVarChar(1000)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animation_Version", Storage="_Animation", ThisKey="IDAnimation", OtherKey="ID", IsForeignKey=true)]
		public Animation Animation
		{
			get
			{
				return this._Animation.Entity;
			}
			set
			{
				Animation previousValue = this._Animation.Entity;
				if (((previousValue != value) 
							|| (this._Animation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animation.Entity = null;
						previousValue.Versions.Remove(this);
					}
					this._Animation.Entity = value;
					if ((value != null))
					{
						value.Versions.Add(this);
						this._IDAnimation = value.ID;
					}
					else
					{
						this._IDAnimation = default(System.Guid);
					}
					this.SendPropertyChanged("Animation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnimationProduct")]
	public partial class AnimationProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _IDAnimation;
		
		private System.Guid _IDItemGroup;
		
		private System.Guid _IDProduct;
		
		private System.Nullable<System.Guid> _IDItemType;
		
		private System.Nullable<System.Guid> _IDSignature;
		
		private System.Nullable<System.Guid> _IDBrandAxe;
		
		private System.Nullable<System.Guid> _IDCategory;
		
		private System.Nullable<System.Guid> _IDMultipleNormal;
		
		private System.Nullable<System.Guid> _IDMutlipleWarehouse;
		
		private string _BDCBookNumber;
		
		private bool _OnCAS;
		
		private System.DateTime _ConfirmedMADMonth;
		
		private bool _StockRisk;
		
		private bool _DeliveryRisk;
		
		private string _LogisticsComments;
		
		private string _MarketingComments;
		
		private int _SortOrder;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private EntitySet<AnimationProductDetail> _AnimationProductDetails;
		
		private EntityRef<BrandAxe> _BrandAxe;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<ItemGroup> _ItemGroup;
		
		private EntityRef<ItemType> _ItemType;
		
		private EntityRef<Multiple> _Multiple;
		
		private EntityRef<Multiple> _Multiple1;
		
		private EntityRef<Signature> _Signature;
		
		private EntityRef<Animation> _Animation;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIDAnimationChanging(System.Guid value);
    partial void OnIDAnimationChanged();
    partial void OnIDItemGroupChanging(System.Guid value);
    partial void OnIDItemGroupChanged();
    partial void OnIDProductChanging(System.Guid value);
    partial void OnIDProductChanged();
    partial void OnIDItemTypeChanging(System.Nullable<System.Guid> value);
    partial void OnIDItemTypeChanged();
    partial void OnIDSignatureChanging(System.Nullable<System.Guid> value);
    partial void OnIDSignatureChanged();
    partial void OnIDBrandAxeChanging(System.Nullable<System.Guid> value);
    partial void OnIDBrandAxeChanged();
    partial void OnIDCategoryChanging(System.Nullable<System.Guid> value);
    partial void OnIDCategoryChanged();
    partial void OnIDMultipleNormalChanging(System.Nullable<System.Guid> value);
    partial void OnIDMultipleNormalChanged();
    partial void OnIDMultipleWarehouseChanging(System.Nullable<System.Guid> value);
    partial void OnIDMultipleWarehouseChanged();
    partial void OnBDCBookNumberChanging(string value);
    partial void OnBDCBookNumberChanged();
    partial void OnOnCASChanging(bool value);
    partial void OnOnCASChanged();
    partial void OnConfirmedMADMonthChanging(System.DateTime value);
    partial void OnConfirmedMADMonthChanged();
    partial void OnStockRiskChanging(bool value);
    partial void OnStockRiskChanged();
    partial void OnDeliveryRiskChanging(bool value);
    partial void OnDeliveryRiskChanged();
    partial void OnLogisticsCommentsChanging(string value);
    partial void OnLogisticsCommentsChanged();
    partial void OnMarketingCommentsChanging(string value);
    partial void OnMarketingCommentsChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public AnimationProduct()
		{
			this._AnimationProductDetails = new EntitySet<AnimationProductDetail>(new Action<AnimationProductDetail>(this.attach_AnimationProductDetails), new Action<AnimationProductDetail>(this.detach_AnimationProductDetails));
			this._BrandAxe = default(EntityRef<BrandAxe>);
			this._Category = default(EntityRef<Category>);
			this._ItemGroup = default(EntityRef<ItemGroup>);
			this._ItemType = default(EntityRef<ItemType>);
			this._Multiple = default(EntityRef<Multiple>);
			this._Multiple1 = default(EntityRef<Multiple>);
			this._Signature = default(EntityRef<Signature>);
			this._Animation = default(EntityRef<Animation>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAnimation", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDAnimation
		{
			get
			{
				return this._IDAnimation;
			}
			set
			{
				if ((this._IDAnimation != value))
				{
					if (this._Animation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAnimationChanging(value);
					this.SendPropertyChanging();
					this._IDAnimation = value;
					this.SendPropertyChanged("IDAnimation");
					this.OnIDAnimationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDItemGroup", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDItemGroup
		{
			get
			{
				return this._IDItemGroup;
			}
			set
			{
				if ((this._IDItemGroup != value))
				{
					if (this._ItemGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDItemGroupChanging(value);
					this.SendPropertyChanging();
					this._IDItemGroup = value;
					this.SendPropertyChanged("IDItemGroup");
					this.OnIDItemGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDProduct", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDProduct
		{
			get
			{
				return this._IDProduct;
			}
			set
			{
				if ((this._IDProduct != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDProductChanging(value);
					this.SendPropertyChanging();
					this._IDProduct = value;
					this.SendPropertyChanged("IDProduct");
					this.OnIDProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDItemType", DbType="UniqueIdentifier NOT NULL")]
		public System.Nullable<System.Guid> IDItemType
		{
			get
			{
				return this._IDItemType;
			}
			set
			{
				if ((this._IDItemType != value))
				{
					if (this._ItemType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDItemTypeChanging(value);
					this.SendPropertyChanging();
					this._IDItemType = value;
					this.SendPropertyChanged("IDItemType");
					this.OnIDItemTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSignature", DbType="UniqueIdentifier NOT NULL")]
		public System.Nullable<System.Guid> IDSignature
		{
			get
			{
				return this._IDSignature;
			}
			set
			{
				if ((this._IDSignature != value))
				{
					if (this._Signature.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSignatureChanging(value);
					this.SendPropertyChanging();
					this._IDSignature = value;
					this.SendPropertyChanged("IDSignature");
					this.OnIDSignatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBrandAxe", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDBrandAxe
		{
			get
			{
				return this._IDBrandAxe;
			}
			set
			{
				if ((this._IDBrandAxe != value))
				{
					if (this._BrandAxe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDBrandAxeChanging(value);
					this.SendPropertyChanging();
					this._IDBrandAxe = value;
					this.SendPropertyChanged("IDBrandAxe");
					this.OnIDBrandAxeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCategory", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDCategory
		{
			get
			{
				return this._IDCategory;
			}
			set
			{
				if ((this._IDCategory != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCategoryChanging(value);
					this.SendPropertyChanging();
					this._IDCategory = value;
					this.SendPropertyChanged("IDCategory");
					this.OnIDCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMultipleNormal", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDMultipleNormal
		{
			get
			{
				return this._IDMultipleNormal;
			}
			set
			{
				if ((this._IDMultipleNormal != value))
				{
					if (this._Multiple.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDMultipleNormalChanging(value);
					this.SendPropertyChanging();
					this._IDMultipleNormal = value;
					this.SendPropertyChanged("IDMultipleNormal");
					this.OnIDMultipleNormalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="IDMutlipleWarehouse", Storage="_IDMutlipleWarehouse", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDMultipleWarehouse
		{
			get
			{
				return this._IDMutlipleWarehouse;
			}
			set
			{
				if ((this._IDMutlipleWarehouse != value))
				{
					this.OnIDMultipleWarehouseChanging(value);
					this.SendPropertyChanging();
					this._IDMutlipleWarehouse = value;
					this.SendPropertyChanged("IDMultipleWarehouse");
					this.OnIDMultipleWarehouseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BDCBookNumber", DbType="NVarChar(20)")]
		public string BDCBookNumber
		{
			get
			{
				return this._BDCBookNumber;
			}
			set
			{
				if ((this._BDCBookNumber != value))
				{
					this.OnBDCBookNumberChanging(value);
					this.SendPropertyChanging();
					this._BDCBookNumber = value;
					this.SendPropertyChanged("BDCBookNumber");
					this.OnBDCBookNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnCAS", DbType="Bit NOT NULL")]
		public bool OnCAS
		{
			get
			{
				return this._OnCAS;
			}
			set
			{
				if ((this._OnCAS != value))
				{
					this.OnOnCASChanging(value);
					this.SendPropertyChanging();
					this._OnCAS = value;
					this.SendPropertyChanged("OnCAS");
					this.OnOnCASChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfirmedMADMonth", DbType="DateTime NOT NULL")]
		public System.DateTime ConfirmedMADMonth
		{
			get
			{
				return this._ConfirmedMADMonth;
			}
			set
			{
				if ((this._ConfirmedMADMonth != value))
				{
					this.OnConfirmedMADMonthChanging(value);
					this.SendPropertyChanging();
					this._ConfirmedMADMonth = value;
					this.SendPropertyChanged("ConfirmedMADMonth");
					this.OnConfirmedMADMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockRisk", DbType="Bit NOT NULL")]
		public bool StockRisk
		{
			get
			{
				return this._StockRisk;
			}
			set
			{
				if ((this._StockRisk != value))
				{
					this.OnStockRiskChanging(value);
					this.SendPropertyChanging();
					this._StockRisk = value;
					this.SendPropertyChanged("StockRisk");
					this.OnStockRiskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryRisk", DbType="Bit NOT NULL")]
		public bool DeliveryRisk
		{
			get
			{
				return this._DeliveryRisk;
			}
			set
			{
				if ((this._DeliveryRisk != value))
				{
					this.OnDeliveryRiskChanging(value);
					this.SendPropertyChanging();
					this._DeliveryRisk = value;
					this.SendPropertyChanged("DeliveryRisk");
					this.OnDeliveryRiskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogisticsComments", DbType="NVarChar(2000)")]
		public string LogisticsComments
		{
			get
			{
				return this._LogisticsComments;
			}
			set
			{
				if ((this._LogisticsComments != value))
				{
					this.OnLogisticsCommentsChanging(value);
					this.SendPropertyChanging();
					this._LogisticsComments = value;
					this.SendPropertyChanged("LogisticsComments");
					this.OnLogisticsCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarketingComments", DbType="NVarChar(2000)")]
		public string MarketingComments
		{
			get
			{
				return this._MarketingComments;
			}
			set
			{
				if ((this._MarketingComments != value))
				{
					this.OnMarketingCommentsChanging(value);
					this.SendPropertyChanging();
					this._MarketingComments = value;
					this.SendPropertyChanged("MarketingComments");
					this.OnMarketingCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int NOT NULL")]
		public int SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnimationProduct_AnimationProductDetail", Storage="_AnimationProductDetails", ThisKey="ID", OtherKey="IDAnimationProduct")]
		public EntitySet<AnimationProductDetail> AnimationProductDetails
		{
			get
			{
				return this._AnimationProductDetails;
			}
			set
			{
				this._AnimationProductDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrandAxe_AnimationProduct", Storage="_BrandAxe", ThisKey="IDBrandAxe", OtherKey="ID", IsForeignKey=true)]
		public BrandAxe BrandAxe
		{
			get
			{
				return this._BrandAxe.Entity;
			}
			set
			{
				BrandAxe previousValue = this._BrandAxe.Entity;
				if (((previousValue != value) 
							|| (this._BrandAxe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BrandAxe.Entity = null;
						previousValue.AnimationProducts.Remove(this);
					}
					this._BrandAxe.Entity = value;
					if ((value != null))
					{
						value.AnimationProducts.Add(this);
						this._IDBrandAxe = value.ID;
					}
					else
					{
						this._IDBrandAxe = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("BrandAxe");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_AnimationProduct", Storage="_Category", ThisKey="IDCategory", OtherKey="ID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.AnimationProducts.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.AnimationProducts.Add(this);
						this._IDCategory = value.ID;
					}
					else
					{
						this._IDCategory = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemGroup_AnimationProduct", Storage="_ItemGroup", ThisKey="IDItemGroup", OtherKey="ID", IsForeignKey=true)]
		public ItemGroup ItemGroup
		{
			get
			{
				return this._ItemGroup.Entity;
			}
			set
			{
				ItemGroup previousValue = this._ItemGroup.Entity;
				if (((previousValue != value) 
							|| (this._ItemGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemGroup.Entity = null;
						previousValue.AnimationProducts.Remove(this);
					}
					this._ItemGroup.Entity = value;
					if ((value != null))
					{
						value.AnimationProducts.Add(this);
						this._IDItemGroup = value.ID;
					}
					else
					{
						this._IDItemGroup = default(System.Guid);
					}
					this.SendPropertyChanged("ItemGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemType_AnimationProduct", Storage="_ItemType", ThisKey="IDItemType", OtherKey="ID", IsForeignKey=true)]
		public ItemType ItemType
		{
			get
			{
				return this._ItemType.Entity;
			}
			set
			{
				ItemType previousValue = this._ItemType.Entity;
				if (((previousValue != value) 
							|| (this._ItemType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemType.Entity = null;
						previousValue.AnimationProducts.Remove(this);
					}
					this._ItemType.Entity = value;
					if ((value != null))
					{
						value.AnimationProducts.Add(this);
						this._IDItemType = value.ID;
					}
					else
					{
						this._IDItemType = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ItemType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Multiple_AnimationProduct", Storage="_Multiple", ThisKey="IDMultipleNormal", OtherKey="ID", IsForeignKey=true)]
		public Multiple Multiple
		{
			get
			{
				return this._Multiple.Entity;
			}
			set
			{
				Multiple previousValue = this._Multiple.Entity;
				if (((previousValue != value) 
							|| (this._Multiple.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Multiple.Entity = null;
						previousValue.AnimationProducts.Remove(this);
					}
					this._Multiple.Entity = value;
					if ((value != null))
					{
						value.AnimationProducts.Add(this);
						this._IDMultipleNormal = value.ID;
					}
					else
					{
						this._IDMultipleNormal = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Multiple");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Multiple_AnimationProduct1", Storage="_Multiple1", ThisKey="IDMultipleWarehouse", OtherKey="ID", IsForeignKey=true)]
		public Multiple Multiple1
		{
			get
			{
				return this._Multiple1.Entity;
			}
			set
			{
				Multiple previousValue = this._Multiple1.Entity;
				if (((previousValue != value) 
							|| (this._Multiple1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Multiple1.Entity = null;
						previousValue.AnimationProducts1.Remove(this);
					}
					this._Multiple1.Entity = value;
					if ((value != null))
					{
						value.AnimationProducts1.Add(this);
						this._IDMutlipleWarehouse = value.ID;
					}
					else
					{
						this._IDMutlipleWarehouse = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Multiple1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Signature_AnimationProduct", Storage="_Signature", ThisKey="IDSignature", OtherKey="ID", IsForeignKey=true)]
		public Signature Signature
		{
			get
			{
				return this._Signature.Entity;
			}
			set
			{
				Signature previousValue = this._Signature.Entity;
				if (((previousValue != value) 
							|| (this._Signature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Signature.Entity = null;
						previousValue.AnimationProducts.Remove(this);
					}
					this._Signature.Entity = value;
					if ((value != null))
					{
						value.AnimationProducts.Add(this);
						this._IDSignature = value.ID;
					}
					else
					{
						this._IDSignature = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Signature");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animation_AnimationProduct", Storage="_Animation", ThisKey="IDAnimation", OtherKey="ID", IsForeignKey=true)]
		public Animation Animation
		{
			get
			{
				return this._Animation.Entity;
			}
			set
			{
				Animation previousValue = this._Animation.Entity;
				if (((previousValue != value) 
							|| (this._Animation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animation.Entity = null;
						previousValue.AnimationProducts.Remove(this);
					}
					this._Animation.Entity = value;
					if ((value != null))
					{
						value.AnimationProducts.Add(this);
						this._IDAnimation = value.ID;
					}
					else
					{
						this._IDAnimation = default(System.Guid);
					}
					this.SendPropertyChanged("Animation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_AnimationProduct", Storage="_Product", ThisKey="IDProduct", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.AnimationProducts.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.AnimationProducts.Add(this);
						this._IDProduct = value.ID;
					}
					else
					{
						this._IDProduct = default(System.Guid);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AnimationProductDetails(AnimationProductDetail entity)
		{
			this.SendPropertyChanging();
			entity.AnimationProduct = this;
		}
		
		private void detach_AnimationProductDetails(AnimationProductDetail entity)
		{
			this.SendPropertyChanging();
			entity.AnimationProduct = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Animation")]
	public partial class Animation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _IDSalesDrive;
		
		private System.Nullable<System.Guid> _IDPriority;
		
		private System.Nullable<System.Guid> _IDAnimationType;
		
		private System.Nullable<System.Guid> _IDDistributionChannel_Order;
		
		private System.Nullable<System.Guid> _IDOrderType_Order;
		
		private string _Name;
		
		private string _Code;
		
		private string _SAPDespatchCode;
		
		private string _DefaultCustomerReference;
		
		private System.Nullable<byte> _Status;
		
		private System.Nullable<System.DateTime> _RequestedDeliveryDate;
		
		private System.Nullable<System.DateTime> _OnCounterDate;
		
		private System.Nullable<System.DateTime> _PLVDeliveryDate;
		
		private System.Nullable<System.DateTime> _PLVComponentDate;
		
		private System.Nullable<System.DateTime> _StockDate;
		
		private System.Nullable<System.DateTime> _DateClosed;
		
		private System.Nullable<System.DateTime> _DateSAPOrderCreated;
		
		private string _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private System.Nullable<System.DateTime> _DateCalculated;
		
		private System.Guid _IDDivision;
		
		private EntitySet<Version> _Versions;
		
		private EntitySet<AnimationProduct> _AnimationProducts;
		
		private EntitySet<AnimationCustomerGroup> _AnimationCustomerGroups;
		
		private EntityRef<AnimationType> _AnimationType;
		
		private EntityRef<DistributionChannel> _DistributionChannel;
		
		private EntityRef<OrderType> _OrderType;
		
		private EntityRef<Priority> _Priority;
		
		private EntityRef<SalesDrive> _SalesDrive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIDSalesDriveChanging(System.Nullable<System.Guid> value);
    partial void OnIDSalesDriveChanged();
    partial void OnIDPriorityChanging(System.Nullable<System.Guid> value);
    partial void OnIDPriorityChanged();
    partial void OnIDAnimationTypeChanging(System.Nullable<System.Guid> value);
    partial void OnIDAnimationTypeChanged();
    partial void OnIDDistributionChannel_OrderChanging(System.Nullable<System.Guid> value);
    partial void OnIDDistributionChannel_OrderChanged();
    partial void OnIDOrderType_OrderChanging(System.Nullable<System.Guid> value);
    partial void OnIDOrderType_OrderChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnSAPDespatchCodeChanging(string value);
    partial void OnSAPDespatchCodeChanged();
    partial void OnDefaultCustomerReferenceChanging(string value);
    partial void OnDefaultCustomerReferenceChanged();
    partial void OnStatusChanging(System.Nullable<byte> value);
    partial void OnStatusChanged();
    partial void OnRequestedDeliveryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRequestedDeliveryDateChanged();
    partial void OnOnCounterDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOnCounterDateChanged();
    partial void OnPLVDeliveryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPLVDeliveryDateChanged();
    partial void OnPLVComponentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPLVComponentDateChanged();
    partial void OnStockDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStockDateChanged();
    partial void OnDateClosedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateClosedChanged();
    partial void OnDateSAPOrderCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateSAPOrderCreatedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnDateCalculatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCalculatedChanged();
    partial void OnIDDivisionChanging(System.Guid value);
    partial void OnIDDivisionChanged();
    #endregion
		
		public Animation()
		{
			this._Versions = new EntitySet<Version>(new Action<Version>(this.attach_Versions), new Action<Version>(this.detach_Versions));
			this._AnimationProducts = new EntitySet<AnimationProduct>(new Action<AnimationProduct>(this.attach_AnimationProducts), new Action<AnimationProduct>(this.detach_AnimationProducts));
			this._AnimationCustomerGroups = new EntitySet<AnimationCustomerGroup>(new Action<AnimationCustomerGroup>(this.attach_AnimationCustomerGroups), new Action<AnimationCustomerGroup>(this.detach_AnimationCustomerGroups));
			this._AnimationType = default(EntityRef<AnimationType>);
			this._DistributionChannel = default(EntityRef<DistributionChannel>);
			this._OrderType = default(EntityRef<OrderType>);
			this._Priority = default(EntityRef<Priority>);
			this._SalesDrive = default(EntityRef<SalesDrive>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSalesDrive", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDSalesDrive
		{
			get
			{
				return this._IDSalesDrive;
			}
			set
			{
				if ((this._IDSalesDrive != value))
				{
					if (this._SalesDrive.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSalesDriveChanging(value);
					this.SendPropertyChanging();
					this._IDSalesDrive = value;
					this.SendPropertyChanged("IDSalesDrive");
					this.OnIDSalesDriveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPriority", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDPriority
		{
			get
			{
				return this._IDPriority;
			}
			set
			{
				if ((this._IDPriority != value))
				{
					if (this._Priority.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPriorityChanging(value);
					this.SendPropertyChanging();
					this._IDPriority = value;
					this.SendPropertyChanged("IDPriority");
					this.OnIDPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAnimationType", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDAnimationType
		{
			get
			{
				return this._IDAnimationType;
			}
			set
			{
				if ((this._IDAnimationType != value))
				{
					if (this._AnimationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAnimationTypeChanging(value);
					this.SendPropertyChanging();
					this._IDAnimationType = value;
					this.SendPropertyChanged("IDAnimationType");
					this.OnIDAnimationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDistributionChannel_Order", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDDistributionChannel_Order
		{
			get
			{
				return this._IDDistributionChannel_Order;
			}
			set
			{
				if ((this._IDDistributionChannel_Order != value))
				{
					if (this._DistributionChannel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDistributionChannel_OrderChanging(value);
					this.SendPropertyChanging();
					this._IDDistributionChannel_Order = value;
					this.SendPropertyChanged("IDDistributionChannel_Order");
					this.OnIDDistributionChannel_OrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDOrderType_Order", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDOrderType_Order
		{
			get
			{
				return this._IDOrderType_Order;
			}
			set
			{
				if ((this._IDOrderType_Order != value))
				{
					if (this._OrderType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDOrderType_OrderChanging(value);
					this.SendPropertyChanging();
					this._IDOrderType_Order = value;
					this.SendPropertyChanged("IDOrderType_Order");
					this.OnIDOrderType_OrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(20)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SAPDespatchCode", DbType="NVarChar(20)")]
		public string SAPDespatchCode
		{
			get
			{
				return this._SAPDespatchCode;
			}
			set
			{
				if ((this._SAPDespatchCode != value))
				{
					this.OnSAPDespatchCodeChanging(value);
					this.SendPropertyChanging();
					this._SAPDespatchCode = value;
					this.SendPropertyChanged("SAPDespatchCode");
					this.OnSAPDespatchCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultCustomerReference", DbType="NVarChar(20)")]
		public string DefaultCustomerReference
		{
			get
			{
				return this._DefaultCustomerReference;
			}
			set
			{
				if ((this._DefaultCustomerReference != value))
				{
					this.OnDefaultCustomerReferenceChanging(value);
					this.SendPropertyChanging();
					this._DefaultCustomerReference = value;
					this.SendPropertyChanged("DefaultCustomerReference");
					this.OnDefaultCustomerReferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt")]
		public System.Nullable<byte> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestedDeliveryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RequestedDeliveryDate
		{
			get
			{
				return this._RequestedDeliveryDate;
			}
			set
			{
				if ((this._RequestedDeliveryDate != value))
				{
					this.OnRequestedDeliveryDateChanging(value);
					this.SendPropertyChanging();
					this._RequestedDeliveryDate = value;
					this.SendPropertyChanged("RequestedDeliveryDate");
					this.OnRequestedDeliveryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnCounterDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OnCounterDate
		{
			get
			{
				return this._OnCounterDate;
			}
			set
			{
				if ((this._OnCounterDate != value))
				{
					this.OnOnCounterDateChanging(value);
					this.SendPropertyChanging();
					this._OnCounterDate = value;
					this.SendPropertyChanged("OnCounterDate");
					this.OnOnCounterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PLVDeliveryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PLVDeliveryDate
		{
			get
			{
				return this._PLVDeliveryDate;
			}
			set
			{
				if ((this._PLVDeliveryDate != value))
				{
					this.OnPLVDeliveryDateChanging(value);
					this.SendPropertyChanging();
					this._PLVDeliveryDate = value;
					this.SendPropertyChanged("PLVDeliveryDate");
					this.OnPLVDeliveryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PLVComponentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PLVComponentDate
		{
			get
			{
				return this._PLVComponentDate;
			}
			set
			{
				if ((this._PLVComponentDate != value))
				{
					this.OnPLVComponentDateChanging(value);
					this.SendPropertyChanging();
					this._PLVComponentDate = value;
					this.SendPropertyChanged("PLVComponentDate");
					this.OnPLVComponentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StockDate
		{
			get
			{
				return this._StockDate;
			}
			set
			{
				if ((this._StockDate != value))
				{
					this.OnStockDateChanging(value);
					this.SendPropertyChanging();
					this._StockDate = value;
					this.SendPropertyChanged("StockDate");
					this.OnStockDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateClosed", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateClosed
		{
			get
			{
				return this._DateClosed;
			}
			set
			{
				if ((this._DateClosed != value))
				{
					this.OnDateClosedChanging(value);
					this.SendPropertyChanging();
					this._DateClosed = value;
					this.SendPropertyChanged("DateClosed");
					this.OnDateClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateSAPOrderCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateSAPOrderCreated
		{
			get
			{
				return this._DateSAPOrderCreated;
			}
			set
			{
				if ((this._DateSAPOrderCreated != value))
				{
					this.OnDateSAPOrderCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateSAPOrderCreated = value;
					this.SendPropertyChanged("DateSAPOrderCreated");
					this.OnDateSAPOrderCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCalculated", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DateCalculated
		{
			get
			{
				return this._DateCalculated;
			}
			set
			{
				if ((this._DateCalculated != value))
				{
					this.OnDateCalculatedChanging(value);
					this.SendPropertyChanging();
					this._DateCalculated = value;
					this.SendPropertyChanged("DateCalculated");
					this.OnDateCalculatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDivision", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDDivision
		{
			get
			{
				return this._IDDivision;
			}
			set
			{
				if ((this._IDDivision != value))
				{
					this.OnIDDivisionChanging(value);
					this.SendPropertyChanging();
					this._IDDivision = value;
					this.SendPropertyChanged("IDDivision");
					this.OnIDDivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animation_Version", Storage="_Versions", ThisKey="ID", OtherKey="IDAnimation")]
		public EntitySet<Version> Versions
		{
			get
			{
				return this._Versions;
			}
			set
			{
				this._Versions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animation_AnimationProduct", Storage="_AnimationProducts", ThisKey="ID", OtherKey="IDAnimation")]
		public EntitySet<AnimationProduct> AnimationProducts
		{
			get
			{
				return this._AnimationProducts;
			}
			set
			{
				this._AnimationProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animation_AnimationCustomerGroup", Storage="_AnimationCustomerGroups", ThisKey="ID", OtherKey="IDAnimation")]
		public EntitySet<AnimationCustomerGroup> AnimationCustomerGroups
		{
			get
			{
				return this._AnimationCustomerGroups;
			}
			set
			{
				this._AnimationCustomerGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnimationType_Animation", Storage="_AnimationType", ThisKey="IDAnimationType", OtherKey="ID", IsForeignKey=true)]
		public AnimationType AnimationType
		{
			get
			{
				return this._AnimationType.Entity;
			}
			set
			{
				AnimationType previousValue = this._AnimationType.Entity;
				if (((previousValue != value) 
							|| (this._AnimationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AnimationType.Entity = null;
						previousValue.Animations.Remove(this);
					}
					this._AnimationType.Entity = value;
					if ((value != null))
					{
						value.Animations.Add(this);
						this._IDAnimationType = value.ID;
					}
					else
					{
						this._IDAnimationType = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("AnimationType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DistributionChannel_Animation", Storage="_DistributionChannel", ThisKey="IDDistributionChannel_Order", OtherKey="ID", IsForeignKey=true)]
		public DistributionChannel DistributionChannel
		{
			get
			{
				return this._DistributionChannel.Entity;
			}
			set
			{
				DistributionChannel previousValue = this._DistributionChannel.Entity;
				if (((previousValue != value) 
							|| (this._DistributionChannel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DistributionChannel.Entity = null;
						previousValue.Animations.Remove(this);
					}
					this._DistributionChannel.Entity = value;
					if ((value != null))
					{
						value.Animations.Add(this);
						this._IDDistributionChannel_Order = value.ID;
					}
					else
					{
						this._IDDistributionChannel_Order = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("DistributionChannel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderType_Animation", Storage="_OrderType", ThisKey="IDOrderType_Order", OtherKey="ID", IsForeignKey=true)]
		public OrderType OrderType
		{
			get
			{
				return this._OrderType.Entity;
			}
			set
			{
				OrderType previousValue = this._OrderType.Entity;
				if (((previousValue != value) 
							|| (this._OrderType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderType.Entity = null;
						previousValue.Animations.Remove(this);
					}
					this._OrderType.Entity = value;
					if ((value != null))
					{
						value.Animations.Add(this);
						this._IDOrderType_Order = value.ID;
					}
					else
					{
						this._IDOrderType_Order = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("OrderType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Priority_Animation", Storage="_Priority", ThisKey="IDPriority", OtherKey="ID", IsForeignKey=true)]
		public Priority Priority
		{
			get
			{
				return this._Priority.Entity;
			}
			set
			{
				Priority previousValue = this._Priority.Entity;
				if (((previousValue != value) 
							|| (this._Priority.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Priority.Entity = null;
						previousValue.Animations.Remove(this);
					}
					this._Priority.Entity = value;
					if ((value != null))
					{
						value.Animations.Add(this);
						this._IDPriority = value.ID;
					}
					else
					{
						this._IDPriority = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Priority");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesDrive_Animation", Storage="_SalesDrive", ThisKey="IDSalesDrive", OtherKey="ID", IsForeignKey=true)]
		public SalesDrive SalesDrive
		{
			get
			{
				return this._SalesDrive.Entity;
			}
			set
			{
				SalesDrive previousValue = this._SalesDrive.Entity;
				if (((previousValue != value) 
							|| (this._SalesDrive.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SalesDrive.Entity = null;
						previousValue.Animations.Remove(this);
					}
					this._SalesDrive.Entity = value;
					if ((value != null))
					{
						value.Animations.Add(this);
						this._IDSalesDrive = value.ID;
					}
					else
					{
						this._IDSalesDrive = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("SalesDrive");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Versions(Version entity)
		{
			this.SendPropertyChanging();
			entity.Animation = this;
		}
		
		private void detach_Versions(Version entity)
		{
			this.SendPropertyChanging();
			entity.Animation = null;
		}
		
		private void attach_AnimationProducts(AnimationProduct entity)
		{
			this.SendPropertyChanging();
			entity.Animation = this;
		}
		
		private void detach_AnimationProducts(AnimationProduct entity)
		{
			this.SendPropertyChanging();
			entity.Animation = null;
		}
		
		private void attach_AnimationCustomerGroups(AnimationCustomerGroup entity)
		{
			this.SendPropertyChanging();
			entity.Animation = this;
		}
		
		private void detach_AnimationCustomerGroups(AnimationCustomerGroup entity)
		{
			this.SendPropertyChanging();
			entity.Animation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SystemMessage")]
	public partial class SystemMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Code;
		
		private string _Name;
		
		private string _MessageContent;
		
		private string _MessageDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMessageContentChanging(string value);
    partial void OnMessageContentChanged();
    partial void OnMessageDescriptionChanging(string value);
    partial void OnMessageDescriptionChanged();
    #endregion
		
		public SystemMessage()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(100)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageContent", DbType="NVarChar(MAX)")]
		public string MessageContent
		{
			get
			{
				return this._MessageContent;
			}
			set
			{
				if ((this._MessageContent != value))
				{
					this.OnMessageContentChanging(value);
					this.SendPropertyChanging();
					this._MessageContent = value;
					this.SendPropertyChanged("MessageContent");
					this.OnMessageContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageDescription", DbType="NVarChar(MAX)")]
		public string MessageDescription
		{
			get
			{
				return this._MessageDescription;
			}
			set
			{
				if ((this._MessageDescription != value))
				{
					this.OnMessageDescriptionChanging(value);
					this.SendPropertyChanging();
					this._MessageDescription = value;
					this.SendPropertyChanged("MessageDescription");
					this.OnMessageDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplicationSettings")]
	public partial class ApplicationSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _SettingKey;
		
		private string _SettingValue;
		
		private System.Nullable<System.Guid> _IDDivision;
		
		private EntityRef<Division> _Division;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnSettingKeyChanging(string value);
    partial void OnSettingKeyChanged();
    partial void OnSettingValueChanging(string value);
    partial void OnSettingValueChanged();
    partial void OnIDDivisionChanging(System.Nullable<System.Guid> value);
    partial void OnIDDivisionChanged();
    #endregion
		
		public ApplicationSetting()
		{
			this._Division = default(EntityRef<Division>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingKey", DbType="NVarChar(4000)")]
		public string SettingKey
		{
			get
			{
				return this._SettingKey;
			}
			set
			{
				if ((this._SettingKey != value))
				{
					this.OnSettingKeyChanging(value);
					this.SendPropertyChanging();
					this._SettingKey = value;
					this.SendPropertyChanged("SettingKey");
					this.OnSettingKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingValue", DbType="NVarChar(4000)")]
		public string SettingValue
		{
			get
			{
				return this._SettingValue;
			}
			set
			{
				if ((this._SettingValue != value))
				{
					this.OnSettingValueChanging(value);
					this.SendPropertyChanging();
					this._SettingValue = value;
					this.SendPropertyChanged("SettingValue");
					this.OnSettingValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDivision", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDDivision
		{
			get
			{
				return this._IDDivision;
			}
			set
			{
				if ((this._IDDivision != value))
				{
					if (this._Division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDivisionChanging(value);
					this.SendPropertyChanging();
					this._IDDivision = value;
					this.SendPropertyChanged("IDDivision");
					this.OnIDDivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_ApplicationSetting", Storage="_Division", ThisKey="IDDivision", OtherKey="ID", IsForeignKey=true)]
		public Division Division
		{
			get
			{
				return this._Division.Entity;
			}
			set
			{
				Division previousValue = this._Division.Entity;
				if (((previousValue != value) 
							|| (this._Division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division.Entity = null;
						previousValue.ApplicationSettings.Remove(this);
					}
					this._Division.Entity = value;
					if ((value != null))
					{
						value.ApplicationSettings.Add(this);
						this._IDDivision = value.ID;
					}
					else
					{
						this._IDDivision = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Division");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalesEmployee")]
	public partial class SalesEmployee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _EmployeeNumber;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private System.Nullable<System.Guid> _IDDivision;
		
		private EntitySet<Customer> _Customers;
		
		private EntityRef<Division> _Division;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmployeeNumberChanging(string value);
    partial void OnEmployeeNumberChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnIDDivisionChanging(System.Nullable<System.Guid> value);
    partial void OnIDDivisionChanged();
    #endregion
		
		public SalesEmployee()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._Division = default(EntityRef<Division>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeNumber", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string EmployeeNumber
		{
			get
			{
				return this._EmployeeNumber;
			}
			set
			{
				if ((this._EmployeeNumber != value))
				{
					this.OnEmployeeNumberChanging(value);
					this.SendPropertyChanging();
					this._EmployeeNumber = value;
					this.SendPropertyChanged("EmployeeNumber");
					this.OnEmployeeNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDivision", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDDivision
		{
			get
			{
				return this._IDDivision;
			}
			set
			{
				if ((this._IDDivision != value))
				{
					if (this._Division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDivisionChanging(value);
					this.SendPropertyChanging();
					this._IDDivision = value;
					this.SendPropertyChanged("IDDivision");
					this.OnIDDivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesEmployee_Customer", Storage="_Customers", ThisKey="ID", OtherKey="IDSalesEmployee")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_SalesEmployee", Storage="_Division", ThisKey="IDDivision", OtherKey="ID", IsForeignKey=true)]
		public Division Division
		{
			get
			{
				return this._Division.Entity;
			}
			set
			{
				Division previousValue = this._Division.Entity;
				if (((previousValue != value) 
							|| (this._Division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division.Entity = null;
						previousValue.SalesEmployees.Remove(this);
					}
					this._Division.Entity = value;
					if ((value != null))
					{
						value.SalesEmployees.Add(this);
						this._IDDivision = value.ID;
					}
					else
					{
						this._IDDivision = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Division");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.SalesEmployee = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.SalesEmployee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.allocationLog")]
	public partial class allocationLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Guid _IDAnimation;
		
		private System.Guid _LogID;
		
		private string _LogText;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnIDAnimationChanging(System.Guid value);
    partial void OnIDAnimationChanged();
    partial void OnLogIDChanging(System.Guid value);
    partial void OnLogIDChanged();
    partial void OnLogTextChanging(string value);
    partial void OnLogTextChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public allocationLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAnimation", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDAnimation
		{
			get
			{
				return this._IDAnimation;
			}
			set
			{
				if ((this._IDAnimation != value))
				{
					this.OnIDAnimationChanging(value);
					this.SendPropertyChanging();
					this._IDAnimation = value;
					this.SendPropertyChanged("IDAnimation");
					this.OnIDAnimationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogText", DbType="NVarChar(MAX)")]
		public string LogText
		{
			get
			{
				return this._LogText;
			}
			set
			{
				if ((this._LogText != value))
				{
					this.OnLogTextChanging(value);
					this.SendPropertyChanging();
					this._LogText = value;
					this.SendPropertyChanged("LogText");
					this.OnLogTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerAllocation")]
	public partial class CustomerAllocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _IDCustomer;
		
		private System.Guid _IDAnimationProductDetail;
		
		private System.Nullable<int> _FixedAllocation;
		
		private System.Nullable<double> _RetailUplift;
		
		private System.Nullable<int> _CalculatedAllocation;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private System.Nullable<int> _CachedCapacity;
		
		private System.Nullable<System.Guid> _IDCustomerGroupAllocation;
		
		private EntityRef<AnimationProductDetail> _AnimationProductDetail;
		
		private EntityRef<CustomerGroupAllocation> _CustomerGroupAllocation;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIDCustomerChanging(System.Guid value);
    partial void OnIDCustomerChanged();
    partial void OnIDAnimationProductDetailChanging(System.Guid value);
    partial void OnIDAnimationProductDetailChanged();
    partial void OnFixedAllocationChanging(System.Nullable<int> value);
    partial void OnFixedAllocationChanged();
    partial void OnRetailUpliftChanging(System.Nullable<double> value);
    partial void OnRetailUpliftChanged();
    partial void OnCalculatedAllocationChanging(System.Nullable<int> value);
    partial void OnCalculatedAllocationChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnCachedCapacityChanging(System.Nullable<int> value);
    partial void OnCachedCapacityChanged();
    partial void OnIDCustomerGroupAllocationChanging(System.Nullable<System.Guid> value);
    partial void OnIDCustomerGroupAllocationChanged();
    #endregion
		
		public CustomerAllocation()
		{
			this._AnimationProductDetail = default(EntityRef<AnimationProductDetail>);
			this._CustomerGroupAllocation = default(EntityRef<CustomerGroupAllocation>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAnimationProductDetail", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDAnimationProductDetail
		{
			get
			{
				return this._IDAnimationProductDetail;
			}
			set
			{
				if ((this._IDAnimationProductDetail != value))
				{
					if (this._AnimationProductDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAnimationProductDetailChanging(value);
					this.SendPropertyChanging();
					this._IDAnimationProductDetail = value;
					this.SendPropertyChanged("IDAnimationProductDetail");
					this.OnIDAnimationProductDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixedAllocation", DbType="Int")]
		public System.Nullable<int> FixedAllocation
		{
			get
			{
				return this._FixedAllocation;
			}
			set
			{
				if ((this._FixedAllocation != value))
				{
					this.OnFixedAllocationChanging(value);
					this.SendPropertyChanging();
					this._FixedAllocation = value;
					this.SendPropertyChanged("FixedAllocation");
					this.OnFixedAllocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RetailUplift", DbType="Float")]
		public System.Nullable<double> RetailUplift
		{
			get
			{
				return this._RetailUplift;
			}
			set
			{
				if ((this._RetailUplift != value))
				{
					this.OnRetailUpliftChanging(value);
					this.SendPropertyChanging();
					this._RetailUplift = value;
					this.SendPropertyChanged("RetailUplift");
					this.OnRetailUpliftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalculatedAllocation", DbType="Int")]
		public System.Nullable<int> CalculatedAllocation
		{
			get
			{
				return this._CalculatedAllocation;
			}
			set
			{
				if ((this._CalculatedAllocation != value))
				{
					this.OnCalculatedAllocationChanging(value);
					this.SendPropertyChanging();
					this._CalculatedAllocation = value;
					this.SendPropertyChanged("CalculatedAllocation");
					this.OnCalculatedAllocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CachedCapacity", DbType="Int")]
		public System.Nullable<int> CachedCapacity
		{
			get
			{
				return this._CachedCapacity;
			}
			set
			{
				if ((this._CachedCapacity != value))
				{
					this.OnCachedCapacityChanging(value);
					this.SendPropertyChanging();
					this._CachedCapacity = value;
					this.SendPropertyChanged("CachedCapacity");
					this.OnCachedCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomerGroupAllocation", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDCustomerGroupAllocation
		{
			get
			{
				return this._IDCustomerGroupAllocation;
			}
			set
			{
				if ((this._IDCustomerGroupAllocation != value))
				{
					if (this._CustomerGroupAllocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerGroupAllocationChanging(value);
					this.SendPropertyChanging();
					this._IDCustomerGroupAllocation = value;
					this.SendPropertyChanged("IDCustomerGroupAllocation");
					this.OnIDCustomerGroupAllocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnimationProductDetail_CustomerAllocation", Storage="_AnimationProductDetail", ThisKey="IDAnimationProductDetail", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AnimationProductDetail AnimationProductDetail
		{
			get
			{
				return this._AnimationProductDetail.Entity;
			}
			set
			{
				AnimationProductDetail previousValue = this._AnimationProductDetail.Entity;
				if (((previousValue != value) 
							|| (this._AnimationProductDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AnimationProductDetail.Entity = null;
						previousValue.CustomerAllocations.Remove(this);
					}
					this._AnimationProductDetail.Entity = value;
					if ((value != null))
					{
						value.CustomerAllocations.Add(this);
						this._IDAnimationProductDetail = value.ID;
					}
					else
					{
						this._IDAnimationProductDetail = default(System.Guid);
					}
					this.SendPropertyChanged("AnimationProductDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerGroupAllocation_CustomerAllocation", Storage="_CustomerGroupAllocation", ThisKey="IDCustomerGroupAllocation", OtherKey="ID", IsForeignKey=true)]
		public CustomerGroupAllocation CustomerGroupAllocation
		{
			get
			{
				return this._CustomerGroupAllocation.Entity;
			}
			set
			{
				CustomerGroupAllocation previousValue = this._CustomerGroupAllocation.Entity;
				if (((previousValue != value) 
							|| (this._CustomerGroupAllocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerGroupAllocation.Entity = null;
						previousValue.CustomerAllocations.Remove(this);
					}
					this._CustomerGroupAllocation.Entity = value;
					if ((value != null))
					{
						value.CustomerAllocations.Add(this);
						this._IDCustomerGroupAllocation = value.ID;
					}
					else
					{
						this._IDCustomerGroupAllocation = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("CustomerGroupAllocation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerAllocation", Storage="_Customer", ThisKey="IDCustomer", OtherKey="ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustomerAllocations.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustomerAllocations.Add(this);
						this._IDCustomer = value.ID;
					}
					else
					{
						this._IDCustomer = default(System.Guid);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _IDSalesEmployee;
		
		private System.Guid _IDCustomerGroup;
		
		private System.Nullable<System.Guid> _IDSalesArea_AllocationSalesArea;
		
		private System.Data.Linq.Link<System.Nullable<System.Guid>> _IDSalesArea_Original;
		
		private string _AccountNumber;
		
		private string _Name;
		
		private bool _IncludeInSystem;
		
		private bool _Manual;
		
		private System.Data.Linq.Link<string> _ModifiedBy;
		
		private System.Data.Linq.Link<System.Nullable<System.DateTime>> _ModifiedDate;
		
		private bool _Deleted;
		
		private double _TotalSales;
		
		private EntitySet<CustomerBrandExclusion> _CustomerBrandExclusions;
		
		private EntitySet<CustomerCapacity> _CustomerCapacities;
		
		private EntitySet<CustomerCategory> _CustomerCategories;
		
		private EntitySet<CustomerGroupItemType> _CustomerGroupItemTypes;
		
		private EntitySet<Sale> _Sales;
		
		private EntitySet<Sale> _Sales1;
		
		private EntitySet<CustomerAllocation> _CustomerAllocations;
		
		private EntityRef<CustomerGroup> _CustomerGroup;
		
		private EntityRef<SalesArea> _SalesArea;
		
		private EntityRef<SalesEmployee> _SalesEmployee;
		
		private EntityRef<SalesArea> _SalesArea1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIDSalesEmployeeChanging(System.Guid value);
    partial void OnIDSalesEmployeeChanged();
    partial void OnIDCustomerGroupChanging(System.Guid value);
    partial void OnIDCustomerGroupChanged();
    partial void OnIDSalesArea_AllocationSalesAreaChanging(System.Nullable<System.Guid> value);
    partial void OnIDSalesArea_AllocationSalesAreaChanged();
    partial void OnIDSalesArea_OriginalChanging(System.Nullable<System.Guid> value);
    partial void OnIDSalesArea_OriginalChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIncludeInSystemChanging(bool value);
    partial void OnIncludeInSystemChanged();
    partial void OnManualChanging(bool value);
    partial void OnManualChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnTotalSalesChanging(double value);
    partial void OnTotalSalesChanged();
    #endregion
		
		public Customer()
		{
			this._CustomerBrandExclusions = new EntitySet<CustomerBrandExclusion>(new Action<CustomerBrandExclusion>(this.attach_CustomerBrandExclusions), new Action<CustomerBrandExclusion>(this.detach_CustomerBrandExclusions));
			this._CustomerCapacities = new EntitySet<CustomerCapacity>(new Action<CustomerCapacity>(this.attach_CustomerCapacities), new Action<CustomerCapacity>(this.detach_CustomerCapacities));
			this._CustomerCategories = new EntitySet<CustomerCategory>(new Action<CustomerCategory>(this.attach_CustomerCategories), new Action<CustomerCategory>(this.detach_CustomerCategories));
			this._CustomerGroupItemTypes = new EntitySet<CustomerGroupItemType>(new Action<CustomerGroupItemType>(this.attach_CustomerGroupItemTypes), new Action<CustomerGroupItemType>(this.detach_CustomerGroupItemTypes));
			this._Sales = new EntitySet<Sale>(new Action<Sale>(this.attach_Sales), new Action<Sale>(this.detach_Sales));
			this._Sales1 = new EntitySet<Sale>(new Action<Sale>(this.attach_Sales1), new Action<Sale>(this.detach_Sales1));
			this._CustomerAllocations = new EntitySet<CustomerAllocation>(new Action<CustomerAllocation>(this.attach_CustomerAllocations), new Action<CustomerAllocation>(this.detach_CustomerAllocations));
			this._CustomerGroup = default(EntityRef<CustomerGroup>);
			this._SalesArea = default(EntityRef<SalesArea>);
			this._SalesEmployee = default(EntityRef<SalesEmployee>);
			this._SalesArea1 = default(EntityRef<SalesArea>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSalesEmployee", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDSalesEmployee
		{
			get
			{
				return this._IDSalesEmployee;
			}
			set
			{
				if ((this._IDSalesEmployee != value))
				{
					if (this._SalesEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSalesEmployeeChanging(value);
					this.SendPropertyChanging();
					this._IDSalesEmployee = value;
					this.SendPropertyChanged("IDSalesEmployee");
					this.OnIDSalesEmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomerGroup", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDCustomerGroup
		{
			get
			{
				return this._IDCustomerGroup;
			}
			set
			{
				if ((this._IDCustomerGroup != value))
				{
					if (this._CustomerGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerGroupChanging(value);
					this.SendPropertyChanging();
					this._IDCustomerGroup = value;
					this.SendPropertyChanged("IDCustomerGroup");
					this.OnIDCustomerGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSalesArea_AllocationSalesArea", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDSalesArea_AllocationSalesArea
		{
			get
			{
				return this._IDSalesArea_AllocationSalesArea;
			}
			set
			{
				if ((this._IDSalesArea_AllocationSalesArea != value))
				{
					if (this._SalesArea.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSalesArea_AllocationSalesAreaChanging(value);
					this.SendPropertyChanging();
					this._IDSalesArea_AllocationSalesArea = value;
					this.SendPropertyChanged("IDSalesArea_AllocationSalesArea");
					this.OnIDSalesArea_AllocationSalesAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSalesArea_Original", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDSalesArea_Original
		{
			get
			{
				return this._IDSalesArea_Original.Value;
			}
			set
			{
				if ((this._IDSalesArea_Original.Value != value))
				{
					if (this._SalesArea1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSalesArea_OriginalChanging(value);
					this.SendPropertyChanging();
					this._IDSalesArea_Original.Value = value;
					this.SendPropertyChanged("IDSalesArea_Original");
					this.OnIDSalesArea_OriginalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNumber", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncludeInSystem", DbType="Bit NOT NULL")]
		public bool IncludeInSystem
		{
			get
			{
				return this._IncludeInSystem;
			}
			set
			{
				if ((this._IncludeInSystem != value))
				{
					this.OnIncludeInSystemChanging(value);
					this.SendPropertyChanging();
					this._IncludeInSystem = value;
					this.SendPropertyChanged("IncludeInSystem");
					this.OnIncludeInSystemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manual", DbType="Bit NOT NULL")]
		public bool Manual
		{
			get
			{
				return this._Manual;
			}
			set
			{
				if ((this._Manual != value))
				{
					this.OnManualChanging(value);
					this.SendPropertyChanging();
					this._Manual = value;
					this.SendPropertyChanged("Manual");
					this.OnManualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy.Value;
			}
			set
			{
				if ((this._ModifiedBy.Value != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy.Value = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate.Value;
			}
			set
			{
				if ((this._ModifiedDate.Value != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate.Value = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalSales", DbType="Float NOT NULL")]
		public double TotalSales
		{
			get
			{
				return this._TotalSales;
			}
			set
			{
				if ((this._TotalSales != value))
				{
					this.OnTotalSalesChanging(value);
					this.SendPropertyChanging();
					this._TotalSales = value;
					this.SendPropertyChanged("TotalSales");
					this.OnTotalSalesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerBrandExclusion", Storage="_CustomerBrandExclusions", ThisKey="ID", OtherKey="IDCustomer")]
		public EntitySet<CustomerBrandExclusion> CustomerBrandExclusions
		{
			get
			{
				return this._CustomerBrandExclusions;
			}
			set
			{
				this._CustomerBrandExclusions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerCapacity", Storage="_CustomerCapacities", ThisKey="ID", OtherKey="IDCustomer")]
		public EntitySet<CustomerCapacity> CustomerCapacities
		{
			get
			{
				return this._CustomerCapacities;
			}
			set
			{
				this._CustomerCapacities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerCategory", Storage="_CustomerCategories", ThisKey="ID", OtherKey="IDCustomer")]
		public EntitySet<CustomerCategory> CustomerCategories
		{
			get
			{
				return this._CustomerCategories;
			}
			set
			{
				this._CustomerCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerGroupItemType", Storage="_CustomerGroupItemTypes", ThisKey="ID", OtherKey="IDCustomer")]
		public EntitySet<CustomerGroupItemType> CustomerGroupItemTypes
		{
			get
			{
				return this._CustomerGroupItemTypes;
			}
			set
			{
				this._CustomerGroupItemTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Sale", Storage="_Sales", ThisKey="ID", OtherKey="IDCustomer")]
		public EntitySet<Sale> Sales
		{
			get
			{
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Sale1", Storage="_Sales1", ThisKey="ID", OtherKey="IDCustomer_Benchmark")]
		public EntitySet<Sale> Sales1
		{
			get
			{
				return this._Sales1;
			}
			set
			{
				this._Sales1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerAllocation", Storage="_CustomerAllocations", ThisKey="ID", OtherKey="IDCustomer")]
		public EntitySet<CustomerAllocation> CustomerAllocations
		{
			get
			{
				return this._CustomerAllocations;
			}
			set
			{
				this._CustomerAllocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerGroup_Customer", Storage="_CustomerGroup", ThisKey="IDCustomerGroup", OtherKey="ID", IsForeignKey=true)]
		public CustomerGroup CustomerGroup
		{
			get
			{
				return this._CustomerGroup.Entity;
			}
			set
			{
				CustomerGroup previousValue = this._CustomerGroup.Entity;
				if (((previousValue != value) 
							|| (this._CustomerGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerGroup.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._CustomerGroup.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._IDCustomerGroup = value.ID;
					}
					else
					{
						this._IDCustomerGroup = default(System.Guid);
					}
					this.SendPropertyChanged("CustomerGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesArea_Customer", Storage="_SalesArea", ThisKey="IDSalesArea_AllocationSalesArea", OtherKey="ID", IsForeignKey=true)]
		public SalesArea SalesArea
		{
			get
			{
				return this._SalesArea.Entity;
			}
			set
			{
				SalesArea previousValue = this._SalesArea.Entity;
				if (((previousValue != value) 
							|| (this._SalesArea.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SalesArea.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._SalesArea.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._IDSalesArea_AllocationSalesArea = value.ID;
					}
					else
					{
						this._IDSalesArea_AllocationSalesArea = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("SalesArea");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesEmployee_Customer", Storage="_SalesEmployee", ThisKey="IDSalesEmployee", OtherKey="ID", IsForeignKey=true)]
		public SalesEmployee SalesEmployee
		{
			get
			{
				return this._SalesEmployee.Entity;
			}
			set
			{
				SalesEmployee previousValue = this._SalesEmployee.Entity;
				if (((previousValue != value) 
							|| (this._SalesEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SalesEmployee.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._SalesEmployee.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._IDSalesEmployee = value.ID;
					}
					else
					{
						this._IDSalesEmployee = default(System.Guid);
					}
					this.SendPropertyChanged("SalesEmployee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesArea_Customer1", Storage="_SalesArea1", ThisKey="IDSalesArea_Original", OtherKey="ID", IsForeignKey=true)]
		public SalesArea SalesArea1
		{
			get
			{
				return this._SalesArea1.Entity;
			}
			set
			{
				SalesArea previousValue = this._SalesArea1.Entity;
				if (((previousValue != value) 
							|| (this._SalesArea1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SalesArea1.Entity = null;
						previousValue.Customers1.Remove(this);
					}
					this._SalesArea1.Entity = value;
					if ((value != null))
					{
						value.Customers1.Add(this);
						this._IDSalesArea_Original.Value = value.ID;
					}
					else
					{
						this._IDSalesArea_Original.Value = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("SalesArea1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerBrandExclusions(CustomerBrandExclusion entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustomerBrandExclusions(CustomerBrandExclusion entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_CustomerCapacities(CustomerCapacity entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustomerCapacities(CustomerCapacity entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_CustomerCategories(CustomerCategory entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustomerCategories(CustomerCategory entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_CustomerGroupItemTypes(CustomerGroupItemType entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustomerGroupItemTypes(CustomerGroupItemType entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Sales1(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Customer1 = this;
		}
		
		private void detach_Sales1(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Customer1 = null;
		}
		
		private void attach_CustomerAllocations(CustomerAllocation entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustomerAllocations(CustomerAllocation entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnimationCustomerGroup")]
	public partial class AnimationCustomerGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _IDAnimation;
		
		private System.Guid _IDCustomerGroup;
		
		private System.Guid _IDRetailerType;
		
		private bool _IncludeInAllocation;
		
		private System.DateTime _OnCounterDate;
		
		private System.DateTime _PLVDeliveryDate;
		
		private System.DateTime _PLVComponentDate;
		
		private System.DateTime _StockDate;
		
		private string _SAPDespatchCode;
		
		private System.Nullable<int> _OverridenFlags;
		
		private string _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntityRef<Animation> _Animation;
		
		private EntityRef<CustomerGroup> _CustomerGroup;
		
		private EntityRef<RetailerType> _RetailerType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIDAnimationChanging(System.Guid value);
    partial void OnIDAnimationChanged();
    partial void OnIDCustomerGroupChanging(System.Guid value);
    partial void OnIDCustomerGroupChanged();
    partial void OnIDRetailerTypeChanging(System.Guid value);
    partial void OnIDRetailerTypeChanged();
    partial void OnIncludeInAllocationChanging(bool value);
    partial void OnIncludeInAllocationChanged();
    partial void OnOnCounterDateChanging(System.DateTime value);
    partial void OnOnCounterDateChanged();
    partial void OnPLVDeliveryDateChanging(System.DateTime value);
    partial void OnPLVDeliveryDateChanged();
    partial void OnPLVComponentDateChanging(System.DateTime value);
    partial void OnPLVComponentDateChanged();
    partial void OnStockDateChanging(System.DateTime value);
    partial void OnStockDateChanged();
    partial void OnSAPDespatchCodeChanging(string value);
    partial void OnSAPDespatchCodeChanged();
    partial void OnOverridenFlagsChanging(System.Nullable<int> value);
    partial void OnOverridenFlagsChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public AnimationCustomerGroup()
		{
			this._Animation = default(EntityRef<Animation>);
			this._CustomerGroup = default(EntityRef<CustomerGroup>);
			this._RetailerType = default(EntityRef<RetailerType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAnimation", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDAnimation
		{
			get
			{
				return this._IDAnimation;
			}
			set
			{
				if ((this._IDAnimation != value))
				{
					if (this._Animation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAnimationChanging(value);
					this.SendPropertyChanging();
					this._IDAnimation = value;
					this.SendPropertyChanged("IDAnimation");
					this.OnIDAnimationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomerGroup", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDCustomerGroup
		{
			get
			{
				return this._IDCustomerGroup;
			}
			set
			{
				if ((this._IDCustomerGroup != value))
				{
					if (this._CustomerGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerGroupChanging(value);
					this.SendPropertyChanging();
					this._IDCustomerGroup = value;
					this.SendPropertyChanged("IDCustomerGroup");
					this.OnIDCustomerGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRetailerType", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDRetailerType
		{
			get
			{
				return this._IDRetailerType;
			}
			set
			{
				if ((this._IDRetailerType != value))
				{
					if (this._RetailerType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDRetailerTypeChanging(value);
					this.SendPropertyChanging();
					this._IDRetailerType = value;
					this.SendPropertyChanged("IDRetailerType");
					this.OnIDRetailerTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncludeInAllocation", DbType="Bit NOT NULL")]
		public bool IncludeInAllocation
		{
			get
			{
				return this._IncludeInAllocation;
			}
			set
			{
				if ((this._IncludeInAllocation != value))
				{
					this.OnIncludeInAllocationChanging(value);
					this.SendPropertyChanging();
					this._IncludeInAllocation = value;
					this.SendPropertyChanged("IncludeInAllocation");
					this.OnIncludeInAllocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnCounterDate", DbType="DateTime NOT NULL")]
		public System.DateTime OnCounterDate
		{
			get
			{
				return this._OnCounterDate;
			}
			set
			{
				if ((this._OnCounterDate != value))
				{
					this.OnOnCounterDateChanging(value);
					this.SendPropertyChanging();
					this._OnCounterDate = value;
					this.SendPropertyChanged("OnCounterDate");
					this.OnOnCounterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PLVDeliveryDate", DbType="DateTime NOT NULL")]
		public System.DateTime PLVDeliveryDate
		{
			get
			{
				return this._PLVDeliveryDate;
			}
			set
			{
				if ((this._PLVDeliveryDate != value))
				{
					this.OnPLVDeliveryDateChanging(value);
					this.SendPropertyChanging();
					this._PLVDeliveryDate = value;
					this.SendPropertyChanged("PLVDeliveryDate");
					this.OnPLVDeliveryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PLVComponentDate", DbType="DateTime NOT NULL")]
		public System.DateTime PLVComponentDate
		{
			get
			{
				return this._PLVComponentDate;
			}
			set
			{
				if ((this._PLVComponentDate != value))
				{
					this.OnPLVComponentDateChanging(value);
					this.SendPropertyChanging();
					this._PLVComponentDate = value;
					this.SendPropertyChanged("PLVComponentDate");
					this.OnPLVComponentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockDate", DbType="DateTime NOT NULL")]
		public System.DateTime StockDate
		{
			get
			{
				return this._StockDate;
			}
			set
			{
				if ((this._StockDate != value))
				{
					this.OnStockDateChanging(value);
					this.SendPropertyChanging();
					this._StockDate = value;
					this.SendPropertyChanged("StockDate");
					this.OnStockDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SAPDespatchCode", DbType="NVarChar(20)")]
		public string SAPDespatchCode
		{
			get
			{
				return this._SAPDespatchCode;
			}
			set
			{
				if ((this._SAPDespatchCode != value))
				{
					this.OnSAPDespatchCodeChanging(value);
					this.SendPropertyChanging();
					this._SAPDespatchCode = value;
					this.SendPropertyChanged("SAPDespatchCode");
					this.OnSAPDespatchCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OverridenFlags", DbType="Int")]
		public System.Nullable<int> OverridenFlags
		{
			get
			{
				return this._OverridenFlags;
			}
			set
			{
				if ((this._OverridenFlags != value))
				{
					this.OnOverridenFlagsChanging(value);
					this.SendPropertyChanging();
					this._OverridenFlags = value;
					this.SendPropertyChanged("OverridenFlags");
					this.OnOverridenFlagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animation_AnimationCustomerGroup", Storage="_Animation", ThisKey="IDAnimation", OtherKey="ID", IsForeignKey=true)]
		public Animation Animation
		{
			get
			{
				return this._Animation.Entity;
			}
			set
			{
				Animation previousValue = this._Animation.Entity;
				if (((previousValue != value) 
							|| (this._Animation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animation.Entity = null;
						previousValue.AnimationCustomerGroups.Remove(this);
					}
					this._Animation.Entity = value;
					if ((value != null))
					{
						value.AnimationCustomerGroups.Add(this);
						this._IDAnimation = value.ID;
					}
					else
					{
						this._IDAnimation = default(System.Guid);
					}
					this.SendPropertyChanged("Animation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerGroup_AnimationCustomerGroup", Storage="_CustomerGroup", ThisKey="IDCustomerGroup", OtherKey="ID", IsForeignKey=true)]
		public CustomerGroup CustomerGroup
		{
			get
			{
				return this._CustomerGroup.Entity;
			}
			set
			{
				CustomerGroup previousValue = this._CustomerGroup.Entity;
				if (((previousValue != value) 
							|| (this._CustomerGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerGroup.Entity = null;
						previousValue.AnimationCustomerGroups.Remove(this);
					}
					this._CustomerGroup.Entity = value;
					if ((value != null))
					{
						value.AnimationCustomerGroups.Add(this);
						this._IDCustomerGroup = value.ID;
					}
					else
					{
						this._IDCustomerGroup = default(System.Guid);
					}
					this.SendPropertyChanged("CustomerGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RetailerType_AnimationCustomerGroup", Storage="_RetailerType", ThisKey="IDRetailerType", OtherKey="ID", IsForeignKey=true)]
		public RetailerType RetailerType
		{
			get
			{
				return this._RetailerType.Entity;
			}
			set
			{
				RetailerType previousValue = this._RetailerType.Entity;
				if (((previousValue != value) 
							|| (this._RetailerType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RetailerType.Entity = null;
						previousValue.AnimationCustomerGroups.Remove(this);
					}
					this._RetailerType.Entity = value;
					if ((value != null))
					{
						value.AnimationCustomerGroups.Add(this);
						this._IDRetailerType = value.ID;
					}
					else
					{
						this._IDRetailerType = default(System.Guid);
					}
					this.SendPropertyChanged("RetailerType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _IDDivision;
		
		private string _MaterialCode;
		
		private string _Description;
		
		private string _InternationalCode;
		
		private string _EAN;
		
		private string _Status;
		
		private bool _Manual;
		
		private string _ProcurementType;
		
		private decimal _CIV;
		
		private int _Stock;
		
		private int _StockLessPipe;
		
		private int _InTransit;
		
		private string _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private int _intID;
		
		private System.Nullable<int> _Pipe;
		
		private EntitySet<Multiple> _Multiples;
		
		private EntitySet<ProductConfirmed> _ProductConfirmeds;
		
		private EntitySet<ProductReceived> _ProductReceiveds;
		
		private EntitySet<AnimationProduct> _AnimationProducts;
		
		private EntityRef<Division> _Division;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIDDivisionChanging(System.Guid value);
    partial void OnIDDivisionChanged();
    partial void OnMaterialCodeChanging(string value);
    partial void OnMaterialCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnInternationalCodeChanging(string value);
    partial void OnInternationalCodeChanged();
    partial void OnEANChanging(string value);
    partial void OnEANChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnManualChanging(bool value);
    partial void OnManualChanged();
    partial void OnProcurementTypeChanging(string value);
    partial void OnProcurementTypeChanged();
    partial void OnCIVChanging(decimal value);
    partial void OnCIVChanged();
    partial void OnStockChanging(int value);
    partial void OnStockChanged();
    partial void OnStockLessPipeChanging(int value);
    partial void OnStockLessPipeChanged();
    partial void OnInTransitChanging(int value);
    partial void OnInTransitChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnintIDChanging(int value);
    partial void OnintIDChanged();
    partial void OnPipeChanging(System.Nullable<int> value);
    partial void OnPipeChanged();
    #endregion
		
		public Product()
		{
			this._Multiples = new EntitySet<Multiple>(new Action<Multiple>(this.attach_Multiples), new Action<Multiple>(this.detach_Multiples));
			this._ProductConfirmeds = new EntitySet<ProductConfirmed>(new Action<ProductConfirmed>(this.attach_ProductConfirmeds), new Action<ProductConfirmed>(this.detach_ProductConfirmeds));
			this._ProductReceiveds = new EntitySet<ProductReceived>(new Action<ProductReceived>(this.attach_ProductReceiveds), new Action<ProductReceived>(this.detach_ProductReceiveds));
			this._AnimationProducts = new EntitySet<AnimationProduct>(new Action<AnimationProduct>(this.attach_AnimationProducts), new Action<AnimationProduct>(this.detach_AnimationProducts));
			this._Division = default(EntityRef<Division>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDivision", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDDivision
		{
			get
			{
				return this._IDDivision;
			}
			set
			{
				if ((this._IDDivision != value))
				{
					if (this._Division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDivisionChanging(value);
					this.SendPropertyChanging();
					this._IDDivision = value;
					this.SendPropertyChanged("IDDivision");
					this.OnIDDivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialCode", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string MaterialCode
		{
			get
			{
				return this._MaterialCode;
			}
			set
			{
				if ((this._MaterialCode != value))
				{
					this.OnMaterialCodeChanging(value);
					this.SendPropertyChanging();
					this._MaterialCode = value;
					this.SendPropertyChanged("MaterialCode");
					this.OnMaterialCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternationalCode", DbType="NVarChar(20)")]
		public string InternationalCode
		{
			get
			{
				return this._InternationalCode;
			}
			set
			{
				if ((this._InternationalCode != value))
				{
					this.OnInternationalCodeChanging(value);
					this.SendPropertyChanging();
					this._InternationalCode = value;
					this.SendPropertyChanged("InternationalCode");
					this.OnInternationalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EAN", DbType="NVarChar(50)")]
		public string EAN
		{
			get
			{
				return this._EAN;
			}
			set
			{
				if ((this._EAN != value))
				{
					this.OnEANChanging(value);
					this.SendPropertyChanging();
					this._EAN = value;
					this.SendPropertyChanged("EAN");
					this.OnEANChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manual", DbType="Bit NOT NULL")]
		public bool Manual
		{
			get
			{
				return this._Manual;
			}
			set
			{
				if ((this._Manual != value))
				{
					this.OnManualChanging(value);
					this.SendPropertyChanging();
					this._Manual = value;
					this.SendPropertyChanged("Manual");
					this.OnManualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcurementType", DbType="NVarChar(50)")]
		public string ProcurementType
		{
			get
			{
				return this._ProcurementType;
			}
			set
			{
				if ((this._ProcurementType != value))
				{
					this.OnProcurementTypeChanging(value);
					this.SendPropertyChanging();
					this._ProcurementType = value;
					this.SendPropertyChanged("ProcurementType");
					this.OnProcurementTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CIV", DbType="Money NOT NULL")]
		public decimal CIV
		{
			get
			{
				return this._CIV;
			}
			set
			{
				if ((this._CIV != value))
				{
					this.OnCIVChanging(value);
					this.SendPropertyChanging();
					this._CIV = value;
					this.SendPropertyChanged("CIV");
					this.OnCIVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stock", DbType="Int NOT NULL")]
		public int Stock
		{
			get
			{
				return this._Stock;
			}
			set
			{
				if ((this._Stock != value))
				{
					this.OnStockChanging(value);
					this.SendPropertyChanging();
					this._Stock = value;
					this.SendPropertyChanged("Stock");
					this.OnStockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockLessPipe", DbType="Int NOT NULL")]
		public int StockLessPipe
		{
			get
			{
				return this._StockLessPipe;
			}
			set
			{
				if ((this._StockLessPipe != value))
				{
					this.OnStockLessPipeChanging(value);
					this.SendPropertyChanging();
					this._StockLessPipe = value;
					this.SendPropertyChanged("StockLessPipe");
					this.OnStockLessPipeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InTransit", DbType="Int NOT NULL")]
		public int InTransit
		{
			get
			{
				return this._InTransit;
			}
			set
			{
				if ((this._InTransit != value))
				{
					this.OnInTransitChanging(value);
					this.SendPropertyChanging();
					this._InTransit = value;
					this.SendPropertyChanged("InTransit");
					this.OnInTransitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int intID
		{
			get
			{
				return this._intID;
			}
			set
			{
				if ((this._intID != value))
				{
					this.OnintIDChanging(value);
					this.SendPropertyChanging();
					this._intID = value;
					this.SendPropertyChanged("intID");
					this.OnintIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Pipe]", Storage="_Pipe", DbType="Int")]
		public System.Nullable<int> Pipe
		{
			get
			{
				return this._Pipe;
			}
			set
			{
				if ((this._Pipe != value))
				{
					this.OnPipeChanging(value);
					this.SendPropertyChanging();
					this._Pipe = value;
					this.SendPropertyChanged("Pipe");
					this.OnPipeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Multiple", Storage="_Multiples", ThisKey="ID", OtherKey="IDProduct")]
		public EntitySet<Multiple> Multiples
		{
			get
			{
				return this._Multiples;
			}
			set
			{
				this._Multiples.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductConfirmed", Storage="_ProductConfirmeds", ThisKey="ID", OtherKey="IDProduct")]
		public EntitySet<ProductConfirmed> ProductConfirmeds
		{
			get
			{
				return this._ProductConfirmeds;
			}
			set
			{
				this._ProductConfirmeds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductReceived", Storage="_ProductReceiveds", ThisKey="ID", OtherKey="IDProduct")]
		public EntitySet<ProductReceived> ProductReceiveds
		{
			get
			{
				return this._ProductReceiveds;
			}
			set
			{
				this._ProductReceiveds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_AnimationProduct", Storage="_AnimationProducts", ThisKey="ID", OtherKey="IDProduct")]
		public EntitySet<AnimationProduct> AnimationProducts
		{
			get
			{
				return this._AnimationProducts;
			}
			set
			{
				this._AnimationProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Product", Storage="_Division", ThisKey="IDDivision", OtherKey="ID", IsForeignKey=true)]
		public Division Division
		{
			get
			{
				return this._Division.Entity;
			}
			set
			{
				Division previousValue = this._Division.Entity;
				if (((previousValue != value) 
							|| (this._Division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Division.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._IDDivision = value.ID;
					}
					else
					{
						this._IDDivision = default(System.Guid);
					}
					this.SendPropertyChanged("Division");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Multiples(Multiple entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Multiples(Multiple entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductConfirmeds(ProductConfirmed entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductConfirmeds(ProductConfirmed entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductReceiveds(ProductReceived entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductReceiveds(ProductReceived entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_AnimationProducts(AnimationProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_AnimationProducts(AnimationProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lockout")]
	public partial class Lockout : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Start;
		
		private System.DateTime _End;
		
		private string _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStartChanging(System.DateTime value);
    partial void OnStartChanged();
    partial void OnEndChanging(System.DateTime value);
    partial void OnEndChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Lockout()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Start
		{
			get
			{
				return this._Start;
			}
			set
			{
				if ((this._Start != value))
				{
					this.OnStartChanging(value);
					this.SendPropertyChanging();
					this._Start = value;
					this.SendPropertyChanged("Start");
					this.OnStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[End]", Storage="_End", DbType="SmallDateTime NOT NULL")]
		public System.DateTime End
		{
			get
			{
				return this._End;
			}
			set
			{
				if ((this._End != value))
				{
					this.OnEndChanging(value);
					this.SendPropertyChanging();
					this._End = value;
					this.SendPropertyChanged("End");
					this.OnEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(32)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class up_GetRetailerTypeResult
	{
		
		private System.Guid _IDRetailerType;
		
		private string _RetailerType;
		
		private System.Guid _IDAnimationProduct;
		
		private System.Nullable<int> _CalculatedAllocation;
		
		public up_GetRetailerTypeResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRetailerType", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDRetailerType
		{
			get
			{
				return this._IDRetailerType;
			}
			set
			{
				if ((this._IDRetailerType != value))
				{
					this._IDRetailerType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RetailerType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RetailerType
		{
			get
			{
				return this._RetailerType;
			}
			set
			{
				if ((this._RetailerType != value))
				{
					this._RetailerType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAnimationProduct", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDAnimationProduct
		{
			get
			{
				return this._IDAnimationProduct;
			}
			set
			{
				if ((this._IDAnimationProduct != value))
				{
					this._IDAnimationProduct = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalculatedAllocation", DbType="Int")]
		public System.Nullable<int> CalculatedAllocation
		{
			get
			{
				return this._CalculatedAllocation;
			}
			set
			{
				if ((this._CalculatedAllocation != value))
				{
					this._CalculatedAllocation = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
